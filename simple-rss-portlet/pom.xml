<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  	<modelVersion>4.0.0</modelVersion>
  
  	<groupId>org.jasig.portlet</groupId>
  	<artifactId>simple-rss-portlet</artifactId>
  	<name>RSS portlet for Sakai</name>
  	<description>An RSS/Atom feed reader.</description>
  	<url>https://wiki.jasig.org/display/PLT/Simple+RSS+Portlet</url>
  	
  	<packaging>war</packaging>
  	
    <parent>
		<groupId>org.sakaiproject</groupId>
		<artifactId>master</artifactId>
		<version>12-SNAPSHOT</version>
		<relativePath>../master/pom.xml</relativePath>
  	</parent>
  	
    <inceptionYear>2011</inceptionYear>
	
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	
	<developers>
		<developer>
			<name>Steve Swinsburg</name>
			<email>steve.swinsburg@gmail.com</email>
		</developer>
	</developers>

  	<scm>
		<connection>scm:git:git@github.com:steveswinsburg/simple-rss-portlet.git</connection>
		<developerConnection>scm:git:git@github.com:steveswinsburg/simple-rss-portlet.git</developerConnection>
		<url>https://github.com/steveswinsburg/simple-rss-portlet</url>
	  <tag>HEAD</tag>
  	</scm> 

    <dependencies>
  		
  		<!-- external bundled dependencies -->
      	<dependency>
         	<groupId>javax.servlet</groupId>
         	<artifactId>jstl</artifactId>
         	<version>1.2</version>
      	</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>
		
		<!--  commons-validator requires oro for Perl5Util -->
		<dependency>
			<groupId>commons-validator</groupId>
			<artifactId>commons-validator</artifactId>
		</dependency>
		<dependency>
    		<groupId>oro</groupId>
    		<artifactId>oro</artifactId>
    		<version>2.0.8</version>
		</dependency>
		
		<dependency>
			<groupId>rome</groupId>
			<artifactId>rome</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>1.1.3</version>
		</dependency>
		
		<!-- ehcache, requires a slf4j impl-->
		<dependency>
			<groupId>org.sakaiproject.kernel</groupId>
			<artifactId>sakai-component-manager</artifactId>
		</dependency>
		<dependency>
			<groupId>org.sakaiproject.kernel</groupId>
			<artifactId>sakai-kernel-api</artifactId>
		</dependency>

		<!--  external shared dependencies -->
		<dependency>
      		<groupId>javax.portlet</groupId>
      		<artifactId>portlet-api</artifactId>
      		<version>1.0</version>
      		<scope>provided</scope>
    	</dependency>
    	<dependency>
      		<groupId>javax.servlet</groupId>
      		<artifactId>servlet-api</artifactId>
      		<version>2.4</version>
      		<scope>provided</scope>
    	</dependency>
		<dependency>
			<groupId>org.apache.pluto</groupId>
	      	<artifactId>pluto-taglib</artifactId>
	      	<version>1.1.7</version>
	      	<scope>provided</scope>
	    </dependency>
	    
	</dependencies>
	
	<properties>
		<war.name>${project.artifactId}</war.name>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.build.sourceVersion>1.6</project.build.sourceVersion>
		<project.build.targetVersion>1.6</project.build.targetVersion>
		<maven.deploy.skip>true</maven.deploy.skip>
		<skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
	</properties>
  
	<build>
		<resources>
			<!--  include log4j.properties and cache config -->
			<resource>
				<filtering>false</filtering>
				<directory>src/main/resources</directory>
			</resource>
			
			<!--  include i18n properties -->
			<resource>
				<filtering>false</filtering>
				<directory>src/main/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>
		
		<!-- specify for non standard builds -->
		<sourceDirectory>${basedir}/src/main/java</sourceDirectory>

		<plugins>
			<!-- Include docs directory in webapp -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<webResources>
            			<resource>
              				<directory>docs</directory>
              				<targetPath>docs</targetPath>
           				</resource>
         		 	</webResources>
         		 	<!-- specify these so non standard builds can find the resources -->
         		 	<warSourceDirectory>${basedir}/src/main/webapp</warSourceDirectory>
         		 	<webXml>${basedir}/src/main/webapp/WEB-INF/web.xml</webXml> 
				</configuration>
			</plugin>
			
			<!-- License plugin, specific for this portlet -->
        	<plugin>
                <groupId>com.mycila.maven-license-plugin</groupId>
                <artifactId>maven-license-plugin</artifactId>
                <version>1.9.0</version>
				<configuration>
					<basedir>${basedir}</basedir>
					<header>docs/apache-license-2-template.txt</header>
					<properties>
						<year>${project.inceptionYear}-2013</year>
						<holder>The Australian National University</holder>
					</properties>
					<encoding>UTF-8</encoding>
					<strictCheck>true</strictCheck>
                    <excludes>
                        <exclude>LICENSE</exclude>
                        <exclude>NOTICE</exclude>
						<exclude>README.md</exclude>
                        <exclude>docs/**</exclude>
                        <exclude>**/*.properties</exclude>
                        <exclude>**/*.xml</exclude>
                    </excludes>
                </configuration>
            </plugin>
			
			<!-- Javadocs -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
			</plugin>
			
			<!-- release plugin, special setup for gpg signing -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<mavenExecutorId>forked-path</mavenExecutorId>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
	<profiles>
		<!-- release profile to sign the artifacts -->
		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- For generating the Maven site -->
		<profile>
			<id>manual-site</id>
			<distributionManagement>
				<site>
					<id>developer.jasig</id>
					<url>${jasig-site-dist-base}/simple-rss-portlet/${project.version}</url>
        		</site>
    		</distributionManagement>
		</profile>
		
		<!-- special profile to automatically add the pluto invoker config to the built webapp, and to specify the final name of the webapp
		This means you can just drop the war file into tomcat/webapps and it is ready to go -->
		<profile>
			<id>sakai-pluto-assemble</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<finalName>${war.name}</finalName>
				<plugins>
					<!-- Configure maven-war-plugin to use the updated web.xml that the pluto plugin creates -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.2</version>
						<configuration>
							<webXml>${project.build.directory}/pluto-resources/web.xml</webXml>
						</configuration>
					</plugin>

					<!-- Bind 'pluto:assemble' goal to 'generate-resources' lifecycle -->
					<plugin>
						<groupId>org.apache.pluto</groupId>
						<artifactId>maven-pluto-plugin</artifactId>
						<version>1.1.7</version>
						<executions>
							<execution>
								<phase>generate-resources</phase>
								<goals>
									<goal>assemble</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	  
	
</project>
