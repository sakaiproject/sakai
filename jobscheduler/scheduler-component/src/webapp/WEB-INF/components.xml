<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="org.sakaiproject.jobscheduler.hibernate.AdditionalHibernateMappings"
          class="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl">
        <property name="mappingResources">
            <list>
                <value>org/sakaiproject/scheduler/events/hibernate/TriggerEventHibernateImpl.hbm.xml</value>
            </list>
        </property>
    </bean>

    <bean id="org.sakaiproject.api.app.scheduler.events.TriggerEventManager.wrapped"
          class="org.sakaiproject.component.app.scheduler.events.hibernate.TriggerEventManagerHibernateImpl">
        <property name="sessionFactory" ref="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory"/>
    </bean>

    <bean id="org.sakaiproject.api.app.scheduler.events.TriggerEventManager"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
            <ref bean="org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager"/>
        </property>
        <property name="target">
            <ref bean="org.sakaiproject.api.app.scheduler.events.TriggerEventManager.wrapped"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <bean id="navigableLogListener" class="org.sakaiproject.component.app.scheduler.NavigableEventLogListener"/>

    <bean id="org.sakaiproject.api.app.scheduler.SchedulerManager"
        class="org.sakaiproject.component.app.scheduler.SchedulerManagerImpl"
        init-method="init" destroy-method="destroy">
        <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
        <property name="sqlService" ref="org.sakaiproject.db.api.SqlService"/>
        <property name="qrtzJobs">
            <set>
            </set>
        </property>
        <property name="qrtzPropFile" value="quartz.properties"/>
        <property name="qrtzPropFileSakai" value="sakai.quartz.properties"/>
        <property name="globalTriggerListener">
            <bean class="org.sakaiproject.component.app.scheduler.GlobalTriggerListener">
                <property name="triggerEventManager">
                    <ref bean="org.sakaiproject.api.app.scheduler.events.TriggerEventManager"/>
                    <!--bean class="org.sakaiproject.component.app.scheduler.events.TriggerEventManagerImpl"/-->
                </property>
                <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
            </bean>
        </property>
        <property name="globalTriggerListeners">
            <set>
                <ref bean="navigableLogListener"/>
            </set>
        </property>
        <property name="globalJobListeners">
            <set>
                <ref bean="navigableLogListener"/>
            </set>
        </property>
        <property name="dataSource">
          <ref bean="javax.sql.DataSource"/>    
        </property>
        <property name="serverId">
            <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <property name="targetObject"><ref bean="org.sakaiproject.component.api.ServerConfigurationService"/></property>
                <property name="targetMethod"><value>getString</value></property>
                <property name="arguments">
                    <list>
                        <value>serverId</value>
                    </list>
                </property>
            </bean>
        </property>
        <property name="autoDdl">
          <value>${auto.ddl}</value>
        </property>
        <property name="initialJobSchedules">
            <list>
                <ref bean="eventPurgeScheduling"/>
            </list>
        </property>
    </bean>
    
    <bean id="org.sakaiproject.api.app.scheduler.ScheduledInvocationManager"
        class="org.sakaiproject.component.app.scheduler.ScheduledInvocationManagerImpl"
        init-method="init" destroy-method="destroy"> 
        <property name="sqlService">
        	<ref bean="org.sakaiproject.db.api.SqlService"/>
        </property> 
        <property name="idManager">
        	<ref bean="org.sakaiproject.id.api.IdManager"/>
        </property>
        <property name="schedulerManager">
        	<ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager"/>
        </property>
        <property name="serverConfigurationService">
        	<ref bean="org.sakaiproject.component.api.ServerConfigurationService"/>
        </property>
        <property name="autoDdl">
            <value>${auto.ddl}</value>
        </property>
    </bean>   
    
    <bean id="eventPurgeJob" class="org.sakaiproject.component.app.scheduler.jobs.eventpurge.EventLogPurgeJob">
        <property name="triggerEventManager">
            <ref bean="org.sakaiproject.api.app.scheduler.events.TriggerEventManager"/>
        </property>
    </bean>

    <bean id="eventPurgeJobWrapper" class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobBeanWrapper"
       init-method="init">
      <property name="beanId">
         <value>eventPurgeJob</value>
      </property>
      <property name="jobName">
         <value>Event Log Purge</value>
      </property>
      <property name="resourceBundleBase" value="org.sakaiproject.component.app.scheduler.jobs.eventpurge.Messages"/>
      <property name="configurableJobProperties">
          <set>
              <bean id="number.days" class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                   <property name="required" value="true"/>
                   <property name="labelResourceKey" value="number.days"/>
                   <property name="descriptionResourceKey" value="number.days.description"/>
                   <property name="defaultValue" value="7"/>
              </bean>
          </set>
      </property>
      <property name="configurableJobPropertyValidator">
          <bean class="org.sakaiproject.component.app.scheduler.jobs.eventpurge.EventPurgeConfigurationValidator"/>
      </property>
      <property name="schedulerManager">
         <ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
      </property>
    </bean>

    <bean id="eventPurgeScheduling" class="org.sakaiproject.component.app.scheduler.jobs.SpringInitialJobSchedule">
        <property name="jobBeanWrapper"><ref bean="eventPurgeJobWrapper"/></property>
        <property name="jobName" value="Event Log Purge"/>
        <property name="triggerName" value="Nightly Log Purge Trigger"/>
        <property name="cronExpression" value="0 0 0 * * ? *"/>
        <property name="configuration">
            <map>
                <entry key="number.days" value="7"/>
            </map>
        </property>
    </bean>

   <!-- Conditions Job -->
   		<!--  simple job that fires a Datetime event -->   
	   <bean id="datetimeJob"
	   		class="org.sakaiproject.conditions.job.DatetimeEventJob">
	   	</bean>

   <!-- Job to allow logging of an arbitrary message to an arbitrary logger at an arbitrary level. -->
   <bean id="org.sakaiproject.component.app.scheduler.jobs.logmessage.LogMessageJob"
         class="org.sakaiproject.component.app.scheduler.jobs.logmessage.LogMessageJob">
   </bean>

   <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.LogMessageJob"
         class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobBeanWrapper"
         init-method="init">
       <property name="beanId">
           <value>org.sakaiproject.component.app.scheduler.jobs.logmessage.LogMessageJob</value>
       </property>
       <property name="jobName">
           <value>Log a message</value>
       </property>
       <property name="resourceBundleBase" value="org.sakaiproject.component.app.scheduler.jobs.logmessage.Messages"/>
       <property name="configurableJobProperties">
           <set>
               <bean class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                   <property name="required" value="true"/>
                   <property name="labelResourceKey" value="level"/>
                   <property name="descriptionResourceKey" value="level.description"/>
                   <property name="defaultValue" value="info"/>
               </bean>
               <bean class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                   <property name="required" value="true"/>
                   <property name="labelResourceKey" value="message"/>
                   <property name="descriptionResourceKey" value="message.description"/>
                   <property name="defaultValue" value="This is a test message"/>
               </bean>
               <bean class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                   <property name="required" value="true"/>
                   <property name="labelResourceKey" value="logger"/>
                   <property name="descriptionResourceKey" value="logger.description"/>
                   <property name="defaultValue" value="org.sakaiproject.component.app.scheduler.jobs.logmessage.LogMessageJob"/>
               </bean>
           </set>
       </property>
       <property name="schedulerManager">
           <ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
       </property>
   </bean>

    <!-- Job to check that all the file sizes on disk are the same as the DB -->
    <bean id="org.sakaiproject.component.app.scheduler.jobs.ContentCheckJob"
          class="org.sakaiproject.component.app.scheduler.jobs.ContentCheckJob">
        <property name="chs" ref="org.sakaiproject.content.api.ContentHostingService"/>
    </bean>
    <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.ContentCheckJob"
          class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
          init-method="init">
        <property name="beanId">
            <value>org.sakaiproject.component.app.scheduler.jobs.ContentCheckJob</value>
        </property>
        <property name="jobName">
            <value>Check content in DB/Filesystem.</value>
        </property>
        <property name="schedulerManager">
            <ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
        </property>
    </bean>

    <!-- Job for syncing authz provided groups this iterates over all the authz groups
         with a provider ID set and updates them. -->
    <bean id="org.sakaiproject.component.app.scheduler.jobs.AuthzGroupProviderSync"
          class="org.sakaiproject.component.app.scheduler.jobs.AuthzGroupProviderSync">
        <property name="authzGroupService">
            <ref bean="org.sakaiproject.authz.api.AuthzGroupService"/>
        </property>
        <property name="sessionManager">
            <ref bean="org.sakaiproject.tool.api.SessionManager"/>
        </property>
    </bean>

    <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.AuthzGroupProviderSync"
          class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
          init-method="init">
        <property name="beanId">
            <value>org.sakaiproject.component.app.scheduler.jobs.AuthzGroupProviderSync</value>
        </property>
        <property name="jobName">
            <value>Sync the provided groups in authz</value>
        </property>
        <property name="schedulerManager">
            <ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
        </property>
    </bean>

	   <!-- this is the helper that will register the above bean with the job scheduler -->
	   <!--
	   <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.DatetimeEventJob"
	      class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper" init-method="init">
	      <property name="beanId">
	         <value>datetimeJob</value>
	      </property>
	      <property name="jobName">
	         <value>Conditional Release Datetime Job</value>
	      </property>
	      <property name="schedulerManager">
	         <ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
	      </property>
	   </bean>
	   -->
	   
	<bean id="org.sakaiproject.component.app.scheduler.jobs.SoftSiteDeletionJob"
		class="org.sakaiproject.component.app.scheduler.jobs.SoftSiteDeletionJob"
		init-method="init">
		<property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
		<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
		<property name="securityService" ref="org.sakaiproject.authz.api.SecurityService"/>
	</bean>

	<bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.SoftSiteDeletion"
		class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		init-method="init">
		<property name="beanId">
			<value>org.sakaiproject.component.app.scheduler.jobs.SoftSiteDeletionJob</value>
		</property>
		<property name="jobName">
			<value>Expunge softly deleted sites</value>
		</property>
		<property name="schedulerManager">
			<ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
		</property>
	</bean>

    <!-- Job to backfill roles into a site from a template -->
    <bean id="org.sakaiproject.component.app.scheduler.jobs.backfillrole.BackFillRoleJob"
          class="org.sakaiproject.component.app.scheduler.jobs.backfillrole.BackFillRoleJob">
        <property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
        <property name="authzService" ref="org.sakaiproject.authz.api.AuthzGroupService"/>
        <property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager"/>
    </bean>

    <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.BackFillRoleJob"
          class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobBeanWrapper"
          init-method="init">
        <property name="beanId">
            <value>org.sakaiproject.component.app.scheduler.jobs.backfillrole.BackFillRoleJob</value>
        </property>
        <property name="jobName">
            <value>Backfill roles from templates</value>
        </property>
        <property name="resourceBundleBase" value="org.sakaiproject.component.app.scheduler.jobs.backfillrole.Messages"/>
        <property name="configurableJobProperties">
            <set>
                <bean class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                    <property name="required" value="false"/>
                    <property name="labelResourceKey" value="site.id"/>
                    <property name="descriptionResourceKey" value="site.id.description"/>
                    <property name="defaultValue" value=""/>
                </bean>
                <bean class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                    <property name="required" value="false"/>
                    <property name="labelResourceKey" value="interval"/>
                    <property name="descriptionResourceKey" value="interval.description"/>
                    <property name="defaultValue" value=""/>
                </bean>
                <bean class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                    <property name="required" value="false"/>
                    <property name="labelResourceKey" value="type"/>
                    <property name="descriptionResourceKey" value="type.description"/>
                    <property name="defaultValue" value=""/>
                </bean>
                <bean class="org.sakaiproject.component.app.scheduler.jobs.SpringConfigurableJobProperty">
                    <property name="required" value="false"/>
                    <property name="labelResourceKey" value="role"/>
                    <property name="descriptionResourceKey" value="role.description"/>
                    <property name="defaultValue" value=""/>
                </bean>

            </set>
        </property>
        <property name="schedulerManager">
            <ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
        </property>
    </bean>

    <import resource="backfill-tool.xml"/>

    <!-- global quartz scheduler proxy bean -->
    <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.CourseSiteRemovalJob"
          class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
          init-method="init">
        <property name="beanId"          ><value>org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob</value></property>
        <property name="jobName"         ><value>Course Site Removal</value>                                     </property>
        <property name="schedulerManager"><ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager"/>      </property>
    </bean>

    <!-- quartz job bean which removes published course sites -->
    <bean id="org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob"
          class="org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob"
           init-method="init">
        <property name="courseSiteRemovalService"  ><ref bean="org.sakaiproject.coursemanagement.api.CourseSiteRemovalService"/></property>
        <property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService"   /></property>
        <property name="sessionManager"            ><ref bean="org.sakaiproject.tool.api.SessionManager"                    /></property>
        <property name="userDirectoryService"      ><ref bean="org.sakaiproject.user.api.UserDirectoryService"              /></property>

    </bean>



    <!-- global quartz scheduler proxy bean -->
    <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.CourseSitePublishJob"
          class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
           init-method="init">
        <property name="beanId"          ><value>org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob</value></property>
        <property name="jobName"         ><value>Course Site Publish</value>                                     </property>
        <property name="schedulerManager"><ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager"/>      </property>
    </bean>

    <!-- quartz job bean which publishes course sites -->
    <bean id="org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob"
          class="org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob"
           init-method="init">
        <property name="courseSitePublishService"  ><ref bean="org.sakaiproject.coursemanagement.api.CourseSitePublishService"/></property>
        <property name="serverConfigurationService"><ref bean="org.sakaiproject.component.api.ServerConfigurationService"   /></property>
        <property name="sessionManager"            ><ref bean="org.sakaiproject.tool.api.SessionManager"                    /></property>
        <property name="userDirectoryService"      ><ref bean="org.sakaiproject.user.api.UserDirectoryService"              /></property>
    </bean>
   
</beans>
