<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_9" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
    <display-name>xlogin</display-name>
    <description>login</description>

    <filter>
        <filter-name>sakai.request</filter-name>
        <filter-class>org.sakaiproject.util.RequestFilter</filter-class>
    </filter>

    <filter>
        <filter-name>sakai.request.container</filter-name>
        <filter-class>org.sakaiproject.util.RequestFilter</filter-class>
       <init-param>
            <param-name>tool.placement</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>remote.user</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>

     <filter>
         <filter-name>Spring Delegated Filter</filter-name>
         <filter-class>org.sakaiproject.login.springframework.SafeDelegatingFilterProxy</filter-class>
         <init-param>
             <param-name>targetBeanName</param-name>
             <param-value>org.springframework.security.web.FilterChainProxy</param-value>
         </init-param>
     </filter>

     <filter-mapping>
         <filter-name>Spring Delegated Filter</filter-name>
         <url-pattern>/container</url-pattern>
         <dispatcher>REQUEST</dispatcher>
         <dispatcher>FORWARD</dispatcher>
         <dispatcher>INCLUDE</dispatcher>
     </filter-mapping>

    <filter-mapping>
        <filter-name>sakai.request</filter-name>
        <servlet-name>sakai.login</servlet-name>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>sakai.request.container</filter-name>
        <servlet-name>sakai.login.container</servlet-name>
        <servlet-name>sakai.login.oauth2.redirect</servlet-name>
        <servlet-name>sakai.login.oauth2.login</servlet-name>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    
    <filter-mapping>
        <filter-name>sakai.request.container</filter-name>
        <servlet-name>sakai.logout.container</servlet-name>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    
    <filter-mapping>
        <filter-name>sakai.request.container</filter-name>
        <servlet-name>sakai.logout.oauth2</servlet-name>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>

    <servlet>
        <servlet-name>sakai.login</servlet-name>
        <servlet-class>org.sakaiproject.login.tool.SkinnableLogin</servlet-class>
        <init-param>
            <param-name>container</param-name>
            <param-value>/sakai-login-tool/container</param-value>
        </init-param>
        <init-param>
        	<param-name>container-logout</param-name>
        	<param-value>/sakai-login-tool/container/logout</param-value>
        </init-param>
        <init-param>
            <param-name>oauth2</param-name>
            <param-value>/sakai-login-tool/oauth2login</param-value>
        </init-param>
        <init-param>
        	<param-name>oauth2-logout</param-name>
        	<param-value>/sakai-login-tool/oauth2/logout</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet>
        <servlet-name>sakai.login.container</servlet-name>
        <servlet-class>org.sakaiproject.login.tool.ContainerLogin</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet>
    	<servlet-name>sakai.logout.container</servlet-name>
    	<servlet-class>org.sakaiproject.login.tool.ContainerLogout</servlet-class>
    </servlet>

    <!-- Constructs the url to invoke the oauth2 server login -->
    <servlet>
        <servlet-name>sakai.login.oauth2.redirect</servlet-name>
        <servlet-class>org.sakaiproject.login.tool.Oauth2AuthenticationRequest</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <!-- Manage the redirection from the oauth2 server -->
    <servlet>
        <servlet-name>sakai.login.oauth2.login</servlet-name>
        <servlet-class>org.sakaiproject.login.tool.Oauth2Login</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Manage the oauth2 token when logout -->
    <servlet>
        <servlet-name>sakai.logout.oauth2</servlet-name>
        <servlet-class>org.sakaiproject.login.tool.Oauth2Logout</servlet-class>
    </servlet>

	<!-- map the container login, and then cause it to trigger container authentication -->
    <servlet-mapping>
        <servlet-name>sakai.login.container</servlet-name>
        <url-pattern>/container/*</url-pattern>
    </servlet-mapping>
    
    <!--  map the container logout -->
    <servlet-mapping>
        <servlet-name>sakai.logout.container</servlet-name>
        <url-pattern>/container/logout</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>sakai.login.oauth2.redirect</servlet-name>
        <url-pattern>/oauth2login</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>sakai.login.oauth2.login</servlet-name>
        <url-pattern>/oauth2/*</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>sakai.logout.oauth2</servlet-name>
        <url-pattern>/oauth2/logout</url-pattern>
    </servlet-mapping>

     <servlet-mapping>
         <servlet-name>sakai.login</servlet-name>
         <url-pattern>/*</url-pattern>
     </servlet-mapping>

     <listener>
         <listener-class>org.sakaiproject.login.springframework.SakaiHomeContextLoaderListener</listener-class>
     </listener>


	<listener>
        <listener-class>org.sakaiproject.util.ToolListener</listener-class>
    </listener>
	
</web-app>
