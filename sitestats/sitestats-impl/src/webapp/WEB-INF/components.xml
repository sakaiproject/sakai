<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config />

	<!-- Database:  load specific session factory and transaction manager defenitions for internal (Sakai) and external DB. -->
	<bean id="org.sakaiproject.sitestats.impl.SiteStatsDatabaseConfig"
          class="org.sakaiproject.sitestats.impl.SiteStatsPersistenceConfig" />

	<!--
	IMPORTANT:
		The following beans can be user-configured:
			- org.sakaiproject.sitestats.api.StatsManager
			- org.sakaiproject.sitestats.api.StatsUpdateManager
		The preferred way to change these values is on sakai.properties. Please refer to
		http://bugs.sakaiproject.org/confluence/display/STAT to detailed caonfiguration
		information.
	 -->
	<!-- StatsManager ______________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.StatsManager.target"
		  class="org.sakaiproject.sitestats.impl.StatsManagerImpl"
		  depends-on="org.sakaiproject.sitestats.api.DBHelper"
		  init-method="init"
		  lazy-init="true">

		<!-- OPTIONS: -->

		<!-- Tool event definition file (events to be collected) -->
		<!-- MOVED TO BEAN: org.sakaiproject.sitestats.api.event.FileEventRegistry -->

		<!-- Force enable/disable site visits if SAK-8499 is solved.
            Probably don't need to canche: by default, this is true if display.users.present=true in sakai.properties -->
		<!-- <property name="enableSiteVisits" value="true" /> -->

		<!-- Enable/disable site activity charts -->
		<!-- <property name="enableSiteActivity" value="true" /> -->

		<!-- Enable/disable Resource statistics for Overview page -->
		<!-- <property name="enableResourceStats" value="true" /> -->

		<!-- Enable/disable sakai-wide statistics -->
		<!-- <property name="serverWideStatsEnabled" value="false" /> -->

		<!-- Default chart background color (default: white) -->
		<property name="chartBackgroundColor" value="#ffffff" />

		<!-- Show charts in 3D by default? (default: false) -->
		<property name="chartIn3D" value="false" />

		<!-- Default chart transparency (default: 1.00f (100%); acceptable: 0.10f - 1.00f) -->
		<property name="chartTransparency" value="1.00f" />

		<!-- Show bar charts item labels by default? (default: false) -->
		<property name="itemLabelsVisible" value="true" />

		<!-- Show last quartz job run date in tool overview page?
            (default: false if collectThreadEnabled@org.sakaiproject.sitestats.api.StatsUpdateManager=true, true otherwise) -->
		<!-- <property name="lastJobRunDateVisible" value="true" /> -->

		<!-- Enable/disable if reports are allowed to be exported -->
		<property name="enableReportExport" value="true" />
		<!-- /OPTIONS -->

		<!-- Sakai services -->
		<property name="eventRegistryService" ref="org.sakaiproject.sitestats.api.event.EventRegistryService"/>
		<property name="userService" ref="org.sakaiproject.user.api.UserDirectoryService"/>
		<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
		<property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
		<property name="toolManager" ref="org.sakaiproject.tool.api.ToolManager"/>
		<property name="lessonBuilderService" ref="org.sakaiproject.lessonbuildertool.model.SimplePageToolDao" />
		<property name="memoryService" ref="org.sakaiproject.memory.api.MemoryService" />
		<property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager"/>
		<property name="eventTrackingService" ref="org.sakaiproject.event.api.EventTrackingService"/>
		<property name="entityManager" ref="org.sakaiproject.entity.api.EntityManager"/>
		<property name="contentHostingService" ref="org.sakaiproject.content.api.ContentHostingService"/>
		<property name="contentTypeImageService" ref="org.sakaiproject.content.api.ContentTypeImageService"/>
		<!-- Hibernate related -->
		<property name="sessionFactory" ref="org.sakaiproject.sitestats.SiteStatsSessionFactory" />
	</bean>
	<!-- Transaction proxy: StatsManager -->
	<bean id="org.sakaiproject.sitestats.api.StatsManager"
		  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		  lazy-init="true">
		<property name="transactionManager" ref="org.sakaiproject.sitestats.SiteStatsTransactionManager" />
		<property name="target" ref="org.sakaiproject.sitestats.api.StatsManager.target"/>
		<property name="transactionAttributes">
			<props><prop key="*">PROPAGATION_REQUIRED</prop></props>
		</property>
	</bean>


	<!-- EventRegistryService ______________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.event.EventRegistryService"
		  class="org.sakaiproject.sitestats.impl.event.EventRegistryServiceImpl"
		  lazy-init="true"
		  init-method="init">

		<!-- Event Registries -->
		<property name="fileEventRegistry" ref="org.sakaiproject.sitestats.api.event.FileEventRegistry"/>
		<property name="entityBrokerEventRegistry" ref="org.sakaiproject.sitestats.api.event.EntityBrokerEventRegistry"/>

		<!-- Server Event Registry -->
		<property name="serverEventIds" ref="org.sakaiproject.sitestats.api.serverevents.List" />

		<!-- Sakai services -->
		<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
		<property name="toolManager" ref="org.sakaiproject.tool.api.ToolManager"/>
		<property name="memoryService" ref="org.sakaiproject.memory.api.MemoryService" />
		<property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService" />
	</bean>
	<bean id="org.sakaiproject.sitestats.api.event.FileEventRegistry"
		  class="org.sakaiproject.sitestats.impl.event.FileEventRegistry"
		  lazy-init="true">
		<!-- Tool event definition file (events to be collected) -->
		<!-- Default:
                1. File specified in property below
                2. If (1.) not found/specified, load defaults from bundled config file:
                    sitestats-api/api/src/config/org/sakaiproject/sitestats.config/toolEventDef.xml
         -->
		<!-- <property name="toolEventsDefinitionFile" value="${sakai.home}/toolEventsDef.xml" /> -->

		<!-- Tool event definition file: add support for new tools or new events to existing tools -->
		<!-- <property name="toolEventsAddDefinitionFile" value="${sakai.home}/toolEventsAddDef.xml" /> -->

		<!-- Tool event definition file: remove support for entire Tools or subset of Tool events -->
		<!-- <property name="toolEventsRemoveDefinitionFile" value="${sakai.home}/toolEventsRemoveDef.xml" /> -->
	</bean>
	<bean id="org.sakaiproject.sitestats.api.event.EntityBrokerEventRegistry"
		  class="org.sakaiproject.sitestats.impl.event.EntityBrokerEventRegistry"
		  init-method="init" lazy-init="true">
		<property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager"/>
		<property name="preferencesService" ref="org.sakaiproject.user.api.PreferencesService"/>
		<property name="entityProviderManager" ref="org.sakaiproject.entitybroker.entityprovider.EntityProviderManager"/>
		<property name="memoryService" ref="org.sakaiproject.memory.api.MemoryService" />
	</bean>



	<!-- ReportManager ______________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.report.ReportManager.target"
		  class="org.sakaiproject.sitestats.impl.report.ReportManagerImpl"
		  lazy-init="true"
		  init-method="init"
		  destroy-method="destroy">

		<!-- Sakai services -->
		<property name="statsManager" ref="org.sakaiproject.sitestats.api.StatsManager" />
		<property name="statsAuthz" ref="org.sakaiproject.sitestats.api.StatsAuthz" />
		<property name="eventRegistryService" ref="org.sakaiproject.sitestats.api.event.EventRegistryService"/>
		<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
		<property name="userService" ref="org.sakaiproject.user.api.UserDirectoryService"/>
		<property name="contentService" ref="org.sakaiproject.content.api.ContentHostingService"/>
		<property name="toolManager" ref="org.sakaiproject.tool.api.ToolManager"/>
		<property name="timeService" ref="org.sakaiproject.time.api.TimeService" />
		<property name="eventTrackingService" ref="org.sakaiproject.event.api.EventTrackingService"/>
		<property name="memoryService" ref="org.sakaiproject.memory.api.MemoryService" />
		<property name="sessionFactory" ref="org.sakaiproject.sitestats.SiteStatsSessionFactory" />
	</bean>
	<!-- Transaction proxy: ReportManager -->
	<bean id="org.sakaiproject.sitestats.api.report.ReportManager"
		  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		  lazy-init="true">
		<property name="transactionManager" ref="org.sakaiproject.sitestats.SiteStatsTransactionManager" />
		<property name="target" ref="org.sakaiproject.sitestats.api.report.ReportManager.target"/>
		<property name="transactionAttributes">
			<props><prop key="*">PROPAGATION_REQUIRED</prop></props>
		</property>
	</bean>


	<!-- ReportDefEntityProvider ___________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.report.ReportDefEntityProvider"
		  class="org.sakaiproject.sitestats.impl.report.ReportDefEntityProvider">
		<!-- Sakai services -->
		<property name="reportManager" ref="org.sakaiproject.sitestats.api.report.ReportManager" />
		<property name="developerHelperService" ref="org.sakaiproject.entitybroker.DeveloperHelperService" />
	</bean>
	<!-- ReportDefEntityProducer ___________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.report.ReportDefEntityProducer"
		  class="org.sakaiproject.sitestats.impl.report.ReportDefEntityProducer"
		  init-method="init">
		<!-- Sakai services -->
		<property name="reportManager" ref="org.sakaiproject.sitestats.api.report.ReportManager" />
	</bean>


	<!-- ChartService ______________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.chart.ChartService"
		  class="org.sakaiproject.sitestats.impl.chart.ChartServiceImpl">

		<!-- Sakai services -->
		<property name="statsManager" ref="org.sakaiproject.sitestats.api.StatsManager" />
		<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
		<property name="userService" ref="org.sakaiproject.user.api.UserDirectoryService"/>
		<property name="preferencesService" ref="org.sakaiproject.user.api.PreferencesService"/>
		<property name="eventRegistryService" ref="org.sakaiproject.sitestats.api.event.EventRegistryService"/>
	</bean>


	<!-- StatsUpdateManager ____________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.StatsUpdateManager.target"
		  class="org.sakaiproject.sitestats.impl.StatsUpdateManagerImpl"
		  lazy-init="true"
		  init-method="init"
		  destroy-method="destroy">

		<!-- OPTIONS: -->
		<!-- Enable/disable collect thread -->
		<property name="collectThreadEnabled" value="true"/>

		<!-- Db update interval for collect thread -->
		<property name="collectThreadUpdateInterval" value="4000"/>

		<!-- Aggregate administrator events? (default: false) -->
		<property name="collectAdminEvents" value="false" />

		<!-- Aggregate events ONLY for sites with SiteStats tool? (default: true) -->
		<property name="collectEventsForSiteWithToolOnly" value="true" />
		<!-- /OPTIONS -->

		<!-- Sakai services -->
		<property name="sessionFactory" ref ="org.sakaiproject.sitestats.SiteStatsSessionFactory" />
		<property name="statsManager" ref="org.sakaiproject.sitestats.api.StatsManager" />
		<property name="eventRegistryService" ref="org.sakaiproject.sitestats.api.event.EventRegistryService"/>
		<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
		<property name="aliasService" ref="org.sakaiproject.alias.api.AliasService"/>
		<property name="entityManager" ref="org.sakaiproject.entity.api.EntityManager"/>
		<property name="eventTrackingService" ref="org.sakaiproject.event.api.EventTrackingService"/>
		<property name="usageSessionService" ref="org.sakaiproject.event.api.UsageSessionService" />
		<property name="transactionTemplate">
			<bean class="org.springframework.transaction.support.TransactionTemplate">
				<property name="transactionManager" ref="org.sakaiproject.sitestats.SiteStatsTransactionManager"/>
			</bean>
		</property>
	</bean>
	<!-- Transaction proxy: StatsUpdateManager -->
	<bean id="org.sakaiproject.sitestats.api.StatsUpdateManager"
		  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		  lazy-init="true">
		<property name="transactionManager" ref="org.sakaiproject.sitestats.SiteStatsTransactionManager" />
		<property name="target" ref="org.sakaiproject.sitestats.api.StatsUpdateManager.target"/>
		<property name="transactionAttributes">
			<props><prop key="*">PROPAGATION_REQUIRED</prop></props>
		</property>
	</bean>


	<!-- ServerWideReportManager ____________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.ServerWideReportManager"
		  class="org.sakaiproject.sitestats.impl.ServerWideReportManagerImpl"
		  lazy-init="true"
		  init-method="init"
		  destroy-method="destroy">

		<!-- Sakai services -->
		<property name="statsManager" ref="org.sakaiproject.sitestats.api.StatsManager" />
		<property name="sqlService" ref="org.sakaiproject.db.api.SqlService"/>
		<property name="usageSessionService" ref="org.sakaiproject.event.api.UsageSessionService" />
		<property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>

	</bean>


	<!-- Authz _________________________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.StatsAuthz"
		  class="org.sakaiproject.sitestats.impl.StatsAuthzImpl"
		  init-method="init">
		<property name="securityService" ref="org.sakaiproject.authz.api.SecurityService"/>
		<property name="userService" ref="org.sakaiproject.user.api.UserDirectoryService"/>
		<property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager"/>
		<property name="toolManager" ref="org.sakaiproject.tool.api.ToolManager"/>
	</bean>


	<!-- StatsUpdateJob _________________________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.StatsAggregateJob"
		  class="org.sakaiproject.sitestats.impl.StatsAggregateJobImpl"
		  init-method="init">
		<!-- OPTIONS: -->
		<!-- Maximum number of processed events per job run. -->
		<property name="maxEventsPerRun" value="50000" />

		<!-- Number of processed events in each sql query. -->
		<property name="sqlBlockSize" value="1000" />

		<!-- Starting eventId to be processed.
            WARNING: This value is only read on the first job run; after that, job status is
                    tracked in SST_JOB_RUN table... If not specified, the job will use the most
                    recent EVENT_ID from SAKAI_EVENT table when Sakai starts up.
         -->
		<!--
        <property name="startEventId" value="-1" />
        -->

		<!-- Specify db properties below if SAKAI_EVENT and SAKAI_SESSION tables lives on a different database of Sakai -->
		<!--
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/GEPUV?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true"/>
        <property name="username" value="dbuser"/>
        <property name="password" value="dbpassword"/>
        -->
		<!-- /OPTIONS -->

		<!-- Sakai services -->
		<property name="statsUpdateManager" ref="org.sakaiproject.sitestats.api.StatsUpdateManager" />
		<property name="sqlService" ref="org.sakaiproject.db.api.SqlService" />
	</bean>
	<bean id="org.sakaiproject.sitestats.api.StatsUpdateJobBeanWrapper"
		  class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		  init-method="init">
		<property name="jobName" value="SiteStats Event Aggregator" />
		<property name="beanId" value="org.sakaiproject.sitestats.api.StatsAggregateJob" />
		<property name="schedulerManager" ref="org.sakaiproject.api.app.scheduler.SchedulerManager" />
	</bean>


	<!-- Job to convert old SST_PREFS table to new SST_PREFERENCES ______________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.ConvOldPrefsJob"
		  class="org.sakaiproject.sitestats.impl.ConvOldPrefsJobImpl">
		<property name="statsManager" ref="org.sakaiproject.sitestats.api.StatsManager" />
		<property name="sqlService" ref="org.sakaiproject.db.api.SqlService" />
		<property name="eventRegistryService" ref="org.sakaiproject.sitestats.api.event.EventRegistryService"/>
	</bean>
	<bean id="org.sakaiproject.sitestats.api.ConvOldPrefsJobBeanWrapper"
		  class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		  init-method="init">
		<property name="jobName" value="SiteStats old SST_PREFS table conversion" />
		<property name="beanId" value="org.sakaiproject.sitestats.api.ConvOldPrefsJob" />
		<property name="schedulerManager" ref="org.sakaiproject.api.app.scheduler.SchedulerManager" />
	</bean>


	<!-- DBHelper ______________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.DBHelper.target"
		  class="org.sakaiproject.sitestats.impl.DBHelper"
		  lazy-init="true"
		  init-method="init">
		<property name="sessionFactory" ref="org.sakaiproject.sitestats.SiteStatsSessionFactory" />
	</bean>
	<!-- Transaction proxy: ReportManager -->
	<bean id="org.sakaiproject.sitestats.api.DBHelper"
		  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		  lazy-init="true">
		<property name="transactionManager" ref="org.sakaiproject.sitestats.SiteStatsTransactionManager" />
		<property name="target" ref="org.sakaiproject.sitestats.api.DBHelper.target"/>
		<property name="transactionAttributes">
			<props><prop key="*">PROPAGATION_REQUIRED</prop></props>
		</property>
	</bean>

	<bean id="org.sakaiproject.sitestats.impl.MBeanExporter"
		  class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
		<property name="beans">
			<map>
				<entry key="org.sakaiproject.sitestats.api:name=StatsUpdateManager"
					   value-ref="org.sakaiproject.sitestats.api.StatsUpdateManager"/>
			</map>
		</property>
		<!-- This doesn't work because it detects both the original bean and it's Transaction Proxy -->
		<!--
		<property name="autodetectModeName" value="AUTODETECT_MBEAN"/>
		<property name="namingStrategy">
			<bean class="org.springframework.jmx.export.naming.KeyNamingStrategy">
				<property name="mappings">
					<props>
						<prop key="org.sakaiproject.sitestats.api.StatsUpdateManager">org.sakaiproject.sitestats.api:name=StatsUpdateManager</prop>
					</props>
				</property>
			</bean>
		</property>
		 -->
	</bean>


	<!-- Hibernate objects api-impl mapping _________________________________________________________________________________________ -->
	<bean id="org.sakaiproject.sitestats.api.Prefs"
		  class="org.sakaiproject.sitestats.impl.PrefsImpl">
	</bean>
	<bean id="org.sakaiproject.sitestats.api.ResourceStat"
		  class="org.sakaiproject.sitestats.impl.ResourceStatImpl">
	</bean>
	<bean id="org.sakaiproject.sitestats.api.EventStat"
		  class="org.sakaiproject.sitestats.impl.EventStatImpl">
	</bean>
	<bean id="org.sakaiproject.sitestats.api.SiteVisits"
		  class="org.sakaiproject.sitestats.impl.SiteVisitsImpl">
	</bean>
	<bean id="org.sakaiproject.sitestats.api.SiteActivity"
		  class="org.sakaiproject.sitestats.impl.SiteActivityImpl">
	</bean>

	<!-- server events -->
	<bean id="org.sakaiproject.sitestats.api.serverevents.List" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<value>site.add</value>
				<value>site.del</value>
				<value>user.add</value>
				<value>user.del</value>
				<value>user.login</value>
			</list>
		</constructor-arg>
	</bean>

</beans>
