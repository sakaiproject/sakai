var fluid_1_5=fluid_1_5||{},fluid=fluid||fluid_1_5;!function($,fluid){"use strict";fluid.registerNamespace("fluid.model.transform"),fluid.registerNamespace("fluid.transforms"),fluid.defaults("fluid.transforms.value",{gradeNames:"fluid.standardTransformFunction",invertConfiguration:"fluid.transforms.value.invert"}),fluid.transforms.value=fluid.identity,fluid.transforms.value.invert=function(transformSpec,transform){var togo=fluid.copy(transformSpec);return togo.inputPath=fluid.model.composePaths(transform.outputPrefix,transformSpec.outputPath),togo.outputPath=fluid.model.composePaths(transform.inputPrefix,transformSpec.inputPath),togo},fluid.transforms.identity=fluid.transforms.value,fluid.defaults("fluid.transforms.identity",{gradeNames:"fluid.transforms.value"}),fluid.defaults("fluid.transforms.literalValue",{gradeNames:"fluid.standardOutputTransformFunction"}),fluid.transforms.literalValue=function(transformSpec){return transformSpec.value},fluid.defaults("fluid.transforms.arrayValue",{gradeNames:"fluid.standardTransformFunction"}),fluid.transforms.arrayValue=fluid.makeArray,fluid.defaults("fluid.transforms.count",{gradeNames:"fluid.standardTransformFunction"}),fluid.transforms.count=function(value){return fluid.makeArray(value).length},fluid.defaults("fluid.transforms.round",{gradeNames:"fluid.standardTransformFunction"}),fluid.transforms.round=function(value){return Math.round(value)},fluid.defaults("fluid.transforms.delete",{gradeNames:"fluid.transformFunction"}),fluid.transforms["delete"]=function(transformSpec,transform){var outputPath=fluid.model.composePaths(transform.outputPrefix,transformSpec.outputPath);transform.applier.requestChange(outputPath,null,"DELETE")},fluid.defaults("fluid.transforms.firstValue",{gradeNames:"fluid.transformFunction"}),fluid.transforms.firstValue=function(transformSpec,transform){transformSpec.values&&transformSpec.values.length||fluid.fail('firstValue transformer requires an array of values at path named "values", supplied',transformSpec);for(var i=0;i<transformSpec.values.length;i++){var value=transformSpec.values[i],expanded=transform.expand(value);if(void 0!==expanded)return expanded}},fluid.defaults("fluid.transforms.linearScale",{gradeNames:["fluid.multiInputTransformFunction","fluid.standardOutputTransformFunction","fluid.lens"],invertConfiguration:"fluid.transforms.linearScale.invert",inputVariables:{value:null,factor:1,offset:0}}),fluid.transforms.linearScale=function(inputs){var value=inputs.value(),factor=inputs.factor(),offset=inputs.offset();return"number"!=typeof value||"number"!=typeof factor||"number"!=typeof offset?void 0:value*factor+offset},fluid.transforms.linearScale.invert=function(transformSpec,transform){var togo=fluid.copy(transformSpec);return togo.factor&&(togo.factor=0===togo.factor?0:1/togo.factor),togo.offset&&(togo.offset=-togo.offset*(void 0!==togo.factor?togo.factor:1)),togo.valuePath=fluid.model.composePaths(transform.outputPrefix,transformSpec.outputPath),togo.outputPath=fluid.model.composePaths(transform.inputPrefix,transformSpec.valuePath),togo},fluid.defaults("fluid.transforms.binaryOp",{gradeNames:["fluid.multiInputTransformFunction","fluid.standardOutputTransformFunction"],inputVariables:{left:null,right:null}}),fluid.transforms.binaryLookup={"===":function(a,b){return a===b},"!==":function(a,b){return a!==b},"<=":function(a,b){return b>=a},"<":function(a,b){return b>a},">=":function(a,b){return a>=b},">":function(a,b){return a>b},"+":function(a,b){return a+b},"-":function(a,b){return a-b},"*":function(a,b){return a*b},"/":function(a,b){return a/b},"%":function(a,b){return a%b},"&&":function(a,b){return a&&b},"||":function(a,b){return a||b}},fluid.transforms.binaryOp=function(inputs,transformSpec,transform){var left=inputs.left(),right=inputs.right(),operator=fluid.model.transform.getValue(void 0,transformSpec.operator,transform),fun=fluid.transforms.binaryLookup[operator];return void 0===fun||void 0===left||void 0===right?void 0:fun(left,right)},fluid.defaults("fluid.transforms.condition",{gradeNames:["fluid.multiInputTransformFunction","fluid.standardOutputTransformFunction"],inputVariables:{"true":null,"false":null,condition:null}}),fluid.transforms.condition=function(inputs){var condition=inputs.condition();return null===condition?void 0:inputs[condition?"true":"false"]()},fluid.defaults("fluid.transforms.valueMapper",{gradeNames:["fluid.transformFunction","fluid.lens"],invertConfiguration:"fluid.transforms.valueMapper.invert",collectInputPaths:"fluid.transforms.valueMapper.collect"}),fluid.model.transform.matchValueMapperFull=function(outerValue,transformSpec,transform){var o=transformSpec.options;if(0===o.length&&fluid.fail("valueMapper supplied empty list of options: ",transformSpec),1===o.length)return 0;for(var matchPower=[],i=0;i<o.length;++i){var option=o[i],value=fluid.firstDefined(fluid.model.transform.getValue(option.inputPath,void 0,transform),outerValue),matchCount=fluid.model.transform.matchValue(option.undefinedInputValue?void 0:option.inputValue,value);matchPower[i]={index:i,matchCount:matchCount}}return matchPower.sort(fluid.model.transform.compareMatches),matchPower[0].matchCount===matchPower[1].matchCount?-1:matchPower[0].index},fluid.transforms.valueMapper=function(transformSpec,transform){transformSpec.options||fluid.fail('demultiplexValue requires a list or hash of options at path named "options", supplied ',transformSpec);var value=fluid.model.transform.getValue(transformSpec.inputPath,void 0,transform),deref=fluid.isArrayable(transformSpec.options)?function(testVal){var index=fluid.model.transform.matchValueMapperFull(testVal,transformSpec,transform);return-1===index?null:transformSpec.options[index]}:function(testVal){return transformSpec.options[testVal]},indexed=deref(value);if(indexed||(indexed=deref(transformSpec.defaultInputValue)),indexed){var outputPath=void 0===indexed.outputPath?transformSpec.defaultOutputPath:indexed.outputPath;transform.outputPrefixOp.push(outputPath);var outputValue;return fluid.isPrimitive(indexed)?outputValue=indexed:indexed.undefinedOutputValue?outputValue=void 0:(outputValue=fluid.model.transform.resolveParam(indexed,transform,"outputValue",void 0),outputValue=void 0===outputValue?transformSpec.defaultOutputValue:outputValue),"string"==typeof outputPath&&void 0!==outputValue&&(fluid.model.transform.setValue(void 0,outputValue,transform,transformSpec.merge),outputValue=void 0),transform.outputPrefixOp.pop(),outputValue}},fluid.transforms.valueMapper.invert=function(transformSpec,transform){var options=[],togo={type:"fluid.transforms.valueMapper",options:options},isArray=fluid.isArrayable(transformSpec.options),findCustom=function(name){return fluid.find(transformSpec.options,function(option){return option[name]?!0:void 0})},anyCustomOutput=findCustom("outputPath"),anyCustomInput=findCustom("inputPath");anyCustomOutput||(togo.inputPath=fluid.model.composePaths(transform.outputPrefix,transformSpec.outputPath)),anyCustomInput||(togo.defaultOutputPath=fluid.model.composePaths(transform.inputPrefix,transformSpec.inputPath));var def=fluid.firstDefined;return fluid.each(transformSpec.options,function(option,key){var outOption={},origInputValue=def(isArray?option.inputValue:key,transformSpec.defaultInputValue);void 0===origInputValue&&fluid.fail("Failure inverting configuration for valueMapper - inputValue could not be resolved for record "+key+": ",transformSpec),outOption.outputValue=origInputValue;var origOutputValue=def(option.outputValue,transformSpec.defaultOutputValue);outOption.inputValue=fluid.model.transform.getValue(option.outputValuePath,origOutputValue,transform),anyCustomOutput&&(outOption.inputPath=fluid.model.composePaths(transform.outputPrefix,def(option.outputPath,transformSpec.outputPath))),anyCustomInput&&(outOption.outputPath=fluid.model.composePaths(transform.inputPrefix,def(option.inputPath,transformSpec.inputPath))),option.outputValuePath&&(outOption.inputValuePath=option.outputValuePath),options.push(outOption)}),togo},fluid.transforms.valueMapper.collect=function(transformSpec,transform){var togo=[];return fluid.model.transform.accumulateInputPath(transformSpec.inputPath,transform,togo),fluid.each(transformSpec.options,function(option){fluid.model.transform.accumulateInputPath(option.inputPath,transform,togo)}),togo},fluid.defaults("fluid.transforms.arrayToSetMembership",{gradeNames:["fluid.standardInputTransformFunction","fluid.lens"],invertConfiguration:"fluid.transforms.arrayToSetMembership.invert"}),fluid.transforms.arrayToSetMembership=function(value,transformSpec,transform){var options=transformSpec.options;value&&fluid.isArrayable(value)||fluid.fail("arrayToSetMembership didn't find array at inputPath nor passed as value.",transformSpec),options||fluid.fail("arrayToSetMembership requires an options block set"),void 0===transformSpec.presentValue&&(transformSpec.presentValue=!0),void 0===transformSpec.missingValue&&(transformSpec.missingValue=!1),fluid.each(options,function(outPath,key){var outVal=-1!==$.inArray(key,value)?transformSpec.presentValue:transformSpec.missingValue;fluid.model.transform.setValue(outPath,outVal,transform)})},fluid.transforms.arrayToSetMembership.invert=function(transformSpec,transform){var togo=fluid.copy(transformSpec);delete togo.inputPath,togo.type="fluid.transforms.setMembershipToArray",togo.outputPath=fluid.model.composePaths(transform.inputPrefix,transformSpec.inputPath);var newOptions={};return fluid.each(transformSpec.options,function(path,oldKey){var newKey=fluid.model.composePaths(transform.outputPrefix,path);newOptions[newKey]=oldKey}),togo.options=newOptions,togo},fluid.defaults("fluid.transforms.setMembershipToArray",{gradeNames:["fluid.standardOutputTransformFunction"]}),fluid.transforms.setMembershipToArray=function(transformSpec,transform){var options=transformSpec.options;options||fluid.fail("setMembershipToArray requires an options block specified"),void 0===transformSpec.presentValue&&(transformSpec.presentValue=!0),void 0===transformSpec.missingValue&&(transformSpec.missingValue=!1);var outputArr=[];return fluid.each(options,function(arrVal,inPath){var val=fluid.model.transform.getValue(inPath,void 0,transform);val===transformSpec.presentValue&&outputArr.push(arrVal)}),outputArr},fluid.model.transform.applyPaths=function(operation,pathOp,paths){for(var i=0;i<paths.length;++i)"push"===operation?pathOp.push(paths[i]):pathOp.pop()},fluid.model.transform.expandInnerValues=function(inputPath,outputPath,transform,innerValues){var inputPrefixOp=transform.inputPrefixOp,outputPrefixOp=transform.outputPrefixOp,apply=fluid.model.transform.applyPaths;apply("push",inputPrefixOp,inputPath),apply("push",outputPrefixOp,outputPath);var expanded={};return fluid.each(innerValues,function(innerValue){var expandedInner=transform.expand(innerValue);fluid.isPrimitive(expandedInner)?expanded=expandedInner:$.extend(!0,expanded,expandedInner)}),apply("pop",outputPrefixOp,outputPath),apply("pop",inputPrefixOp,inputPath),expanded},fluid.defaults("fluid.transforms.arrayToObject",{gradeNames:["fluid.standardTransformFunction","fluid.lens"],invertConfiguration:"fluid.transforms.arrayToObject.invert"}),fluid.transforms.arrayToObject=function(arr,transformSpec,transform){void 0===transformSpec.key&&fluid.fail("arrayToObject requires a 'key' option.",transformSpec),fluid.isArrayable(arr)||fluid.fail("arrayToObject didn't find array at inputPath.",transformSpec);var newHash={},pivot=transformSpec.key;return fluid.each(arr,function(v,k){var newKey=v[pivot],keyType=typeof newKey;"string"!==keyType&&"boolean"!==keyType&&"number"!==keyType&&fluid.fail("arrayToObject encountered untransformable array due to missing or invalid key",v);var content=fluid.copy(v);delete content[pivot],transformSpec.innerValue&&(content=fluid.model.transform.expandInnerValues([transform.inputPrefix,transformSpec.inputPath,k.toString()],[newKey],transform,transformSpec.innerValue)),newHash[newKey]=content}),newHash},fluid.transforms.arrayToObject.invert=function(transformSpec,transform){var togo=fluid.copy(transformSpec);if(togo.type="fluid.transforms.objectToArray",togo.inputPath=fluid.model.composePaths(transform.outputPrefix,transformSpec.outputPath),togo.outputPath=fluid.model.composePaths(transform.inputPrefix,transformSpec.inputPath),togo.innerValue)for(var innerValue=togo.innerValue,i=0;i<innerValue.length;++i)innerValue[i]=fluid.model.transform.invertConfiguration(innerValue[i]);return togo},fluid.defaults("fluid.transforms.objectToArray",{gradeNames:"fluid.standardTransformFunction"}),fluid.transforms.objectToArray=function(hash,transformSpec,transform){void 0===transformSpec.key&&fluid.fail("objectToArray requires a 'key' option.",transformSpec);var newArray=[],pivot=transformSpec.key;return fluid.each(hash,function(v,k){var content={};content[pivot]=k,transformSpec.innerValue&&(v=fluid.model.transform.expandInnerValues([transformSpec.inputPath,k],[transformSpec.outputPath,newArray.length.toString()],transform,transformSpec.innerValue)),$.extend(!0,content,v),newArray.push(content)}),newArray},fluid.defaults("fluid.transforms.limitRange",{gradeNames:"fluid.standardTransformFunction"}),fluid.transforms.limitRange=function(value,transformSpec){var min=transformSpec.min;if(void 0!==min){var excludeMin=transformSpec.excludeMin||0;min+=excludeMin,min>value&&(value=min)}var max=transformSpec.max;if(void 0!==max){var excludeMax=transformSpec.excludeMax||0;max-=excludeMax,value>max&&(value=max)}return value},fluid.defaults("fluid.transforms.free",{gradeNames:"fluid.transformFunction"}),fluid.transforms.free=function(transformSpec){var args=fluid.makeArray(transformSpec.args);return fluid.invokeGlobalFunction(transformSpec.func,args)}}(jQuery,fluid_1_5);