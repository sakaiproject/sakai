#X-Generator: crowdin.com
# this defines the entity description for site
site=Represents a site (a collection of users and tools) in the Sakai system
site.view.new=Adding a site will always set the owner/created by to the current user unless 'owner' is set to a userId, the minimum to create a site is the id and the type, all other fields are optional
site.view.list=Retrieves the list of all sites that the current user can access. Supply a value for '_limit' to specify how many sites should be returned. Note that there is a system maximum that will override a specified value if it is larger than allowed. Supply a value for '_start' to page through results in multiple requests. For example, with 42 sites, requests with '_start' \= 1, '_limit' \= 50 and then '_start' \= 51, '_limit' \= 50 could be used to retrieve the first batch of 42 sites and the second being empty would signify the end of available results.
site.view.edit=Can update all writeable fields in the site including owner
site.view.show=Allows viewing of data from a single site, use 'includeGroups' (boolean) to also get the groups data with the site
site.view.show.field.includeGroups=use this boolean to also get the groups for this site
site.redirect./{prefix}/{id}/memberships=Allows for retrieval of all memberships for a site by redirecting to the memberships entity provider
site.Updateable=The owner (a userId) value can now be changed once the site is created
site.action.exists=Returns an empty 200 if the site exists, and a failure (possibly 404) if it does not. <br/> Note that you can also check this by simply using the show view of a site but that returns the site information as well so this is faster
site.field.owner=A userId, can be changed after a site is created but has no real effect if the contact info is set
site.action.group=Allows access to group information directly using a url like\: /site/siteId/group/groupId For membership actions use the Membership Provider<br /> (GET) /direct/site/siteid/group/groupid - gets metadata for group but not membership. <br />(POST) /direct/site/siteid/group/groupid - updates metadata for group but not membership. <br />(PUT) /direct/site/siteid/group - create a new group in the site (returns group id). Parameters include title, description, optionally initial list of members. <br />(DELETE) /direct/site/siteid/group/groupid - delete an existing group in the site.
site.action.userPerms=Allows the retrieval of the current user's permissions within the specified site using a url like /site/\:SITEID\:/userPerms[/\:PREFIX], where PREFIX allows the caller to limit the returned permissions to a subset. For example, the url '/direct/site/XYZ/userPerms/calendar.json' would return the calendar permissions of the current user in the site 'XYZ'. Missing the PREFIX off would result in the permissions for all the tools in the site being returned.
site.action.perms=Allows the retrieval of the permissions for the specified site using a url like /site/\:SITEID\:/perms[/\:PREFIX].json, where PREFIX allows the caller to limit the returned permissions to a subset. For example, the url '/direct/site/XYZ/perms/calendar.json' would return the calendar permissions for each role in the site 'XYZ'. Missing the PREFIX off would result in the permissions for all the tools in the site being returned.
site.action.setPerms=Allows the setting of the permissions for the specified site by posting to the url /site/\:SITEID\:/setPerms. This is done by passing a set of post parameters where the key takes the form of 'ROLEID\:FUNCTION' and the value is a boolean 'true' or 'false'. For example, passing the parameter 'maintain\:blog.post.create\=true' would switch the blog.post.create function on for the maintain role in the specified site.
site.action.pages=Allows retrieval of all pages and tools in a site, use "props" (true/false, default false) to include page properties, use "config" (true/false, default false) to include tool configurations
site.action.withPerm=The URL for example, /site/withPerm/.json?permission\=site.upd