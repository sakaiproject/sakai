<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!--  SakaiProxy -->
 	<bean id="org.sakaiproject.dash.app.SakaiProxy"
    	class="org.sakaiproject.dash.logic.SakaiProxyImpl"
        init-method="init">
        
        <!-- API injection -->
        <property name="securityService" ref="org.sakaiproject.authz.api.SecurityService" />
        <property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager" />
        <property name="toolManager" ref="org.sakaiproject.tool.api.ToolManager" />
        <property name="userDirectoryService" ref="org.sakaiproject.user.api.UserDirectoryService" />
		<property name="eventTrackingService" ref="org.sakaiproject.event.api.EventTrackingService" />
		<property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService" />
		<property name="siteService" ref="org.sakaiproject.site.api.SiteService" />
		<property name="entityManager" ref="org.sakaiproject.entity.api.EntityManager" />
		<property name="authzGroupService" ref="org.sakaiproject.authz.api.AuthzGroupService" />
		<property name="contentHostingService" ref="org.sakaiproject.content.api.ContentHostingService" />
		<property name="contentTypeImageService" ref="org.sakaiproject.content.api.ContentTypeImageService" />
    	<property name="threadLocalManager" ref="org.sakaiproject.thread_local.api.ThreadLocalManager"/>
    	<property name="functionManager" ref="org.sakaiproject.authz.api.FunctionManager"/>
	</bean>
	
    <bean id="org.sakaiproject.dash.app.DashboardConfig" 
		class="org.sakaiproject.dash.logic.DashboardConfigImpl" 
		init-method="init">
		<property name="dao" ref="org.sakaiproject.dash.dao.DashboardDao"></property>
    	<property name="cache" ref="org.sakaiproject.dash.cache" />	
    </bean>
	
    <bean id="org.sakaiproject.dash.logic.EventCopy"
        class="org.sakaiproject.dash.logic.EventCopy">
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
    </bean>

        <context:annotation-config/>
        <tx:annotation-driven  transaction-manager="transactionManager"/>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="javax.sql.DataSource"/>
	</bean>

  	<bean id="org.sakaiproject.dash.logic.DashboardLogic"
    	class="org.sakaiproject.dash.logic.DashboardLogicImpl"
    	init-method="init" destroy-method="destroy">
  		<constructor-arg>
      		<ref bean="transactionManager"/>
    	</constructor-arg>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
    	<property name="dao" ref="org.sakaiproject.dash.dao.DashboardDao" />	
    	<property name="cache" ref="org.sakaiproject.dash.cache" />	
    	<property name="dashboardConfig" ref="org.sakaiproject.dash.app.DashboardConfig" />
	<property name="developerHelperService" ref="org.sakaiproject.entitybroker.DeveloperHelperService" />
    </bean>
    
	<bean id="org.sakaiproject.dash.app.DashboardUserLogic" 
    	class="org.sakaiproject.dash.logic.DashboardUserLogicImpl"
    	init-method="init" destroy-method="destroy">
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
    	<property name="dao" ref="org.sakaiproject.dash.dao.DashboardDao" />	
    	<property name="cache" ref="org.sakaiproject.dash.cache" />	
    	<property name="dashboardConfig" ref="org.sakaiproject.dash.app.DashboardConfig" />
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    </bean>
    
    <bean id="org.sakaiproject.dash.app.DashboardCommonLogic" 
    	class="org.sakaiproject.dash.logic.DashboardCommonLogicImpl"
    	init-method="init" destroy-method="destroy">
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
    	<property name="dashboardConfig" ref="org.sakaiproject.dash.app.DashboardConfig" />
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="dashboardUserLogic" ref="org.sakaiproject.dash.app.DashboardUserLogic" />
    	<property name="dao" ref="org.sakaiproject.dash.dao.DashboardDao" />
    	<property name="cache" ref="org.sakaiproject.dash.cache" />	
    	<property name="authzGroupService" ref="org.sakaiproject.authz.api.AuthzGroupService" />
    	<property name="transactionManager">
    	   <ref bean="transactionManager"/>
    	</property>
    </bean>
    
    <!-- DAO. This uses the DataSource that has already been setup by Sakai  -->
	<bean id="org.sakaiproject.dash.dao.DashboardDao"
		class="org.sakaiproject.dash.dao.impl.DashboardDaoImpl"
		init-method="init">
		<property name="jdbcTemplate">
			<bean class="org.springframework.jdbc.core.JdbcTemplate">
				<constructor-arg type="javax.sql.DataSource">
					<ref bean="javax.sql.DataSource" />
				</constructor-arg>
				<property name="ignoreWarnings" value="false" />
			</bean>
		</property>
		<property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService" />	
	</bean>
	
	<!-- Cache: ttl=1 hour -->
    <bean id="org.sakaiproject.dash.cache"
        class="org.sakaiproject.memory.util.EhCacheFactoryBean">
        <property name="cacheManager">
            <ref bean="org.sakaiproject.memory.api.MemoryService.cacheManager"/>
        </property>
        <property name="cacheName">
            <value>org.sakaiproject.dash.cache</value>
        </property>
        <property name="maxElementsInMemory" value="1000" />
        <property name="diskPersistent" value="false" />
        <property name="eternal" value="false" />
        <property name="timeToLive" value="3600" />
        <property name="timeToIdle" value="3600" />
    </bean>
    
	<bean id="org.sakaiproject.dash.listener.SiteMembershipNewEventProcessor" 
		class="org.sakaiproject.dash.listener.SiteMembershipNewEventProcessor" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
	</bean>
	
	<bean id="org.sakaiproject.dash.listener.SiteMembershipRemoveEventProcessor" 
		class="org.sakaiproject.dash.listener.SiteMembershipRemoveEventProcessor" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
	</bean>

	<bean id="org.sakaiproject.dash.listener.SitePublishEventProcessor" 
		class="org.sakaiproject.dash.listener.SitePublishEventProcessor" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
		<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
	</bean>
	
	<bean id="org.sakaiproject.dash.listener.SiteUnpublishEventProcessor" 
		class="org.sakaiproject.dash.listener.SiteUnpublishEventProcessor" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
		<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
	</bean>
	
	<!-- EntityType beans go here: -->
	<bean id="org.sakaiproject.dash.entity.AnnouncementSupport" 
		class="org.sakaiproject.dash.entity.AnnouncementSupport" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
		<property name="entityManager" ref="org.sakaiproject.entity.api.EntityManager" />
		<property name="announcementService" ref="org.sakaiproject.announcement.api.AnnouncementService" />
		<property name="threadLocalManager"><ref bean="org.sakaiproject.thread_local.api.ThreadLocalManager"/></property>
	</bean>

	<bean id="org.sakaiproject.dash.entity.AssignmentSupport" 
		class="org.sakaiproject.dash.entity.AssignmentSupport" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
    	<property name="entityBroker" ref="org.sakaiproject.entitybroker.EntityBroker"></property>
    	<property name="assignmentService" ref="org.sakaiproject.assignment.api.AssignmentService" />
	</bean>
	
	<bean id="org.sakaiproject.dash.entity.SamigoSupport" 
		class="org.sakaiproject.dash.entity.SamigoSupport" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
    	<property name="entityBroker" ref="org.sakaiproject.entitybroker.EntityBroker"></property>
	</bean>

	<bean id="org.sakaiproject.dash.entity.ResourceSupport" 
		class="org.sakaiproject.dash.entity.ResourceSupport" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
	</bean>
	
	<bean id="org.sakaiproject.dash.entity.ScheduleSupport" 
		class="org.sakaiproject.dash.entity.ScheduleSupport" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
    	<property name="timeService" ref="org.sakaiproject.time.api.TimeService"></property>
    	<property name="calendarService" ref="org.sakaiproject.calendar.api.CalendarService"></property>
    	<property name="siteService" ref="org.sakaiproject.site.api.SiteService"></property>
	</bean>
	
	<bean id="org.sakaiproject.dash.entity.EntitySupportUtil" 
		class="org.sakaiproject.dash.entity.EntitySupportUtil" 
		init-method="init">
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
	</bean>
	
	<bean parent="org.sakaiproject.entitybroker.entityprovider.AbstractEntityProvider" 
		class="org.sakaiproject.dash.entityprovider.DashboardEntityProvider">
		<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy" />
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic" />
		<property name="dashboardCommonLogic" ref="org.sakaiproject.dash.app.DashboardCommonLogic" />
	</bean>

  <!-- This is the helper that will register the above bean with the ScheduleManager
    Things to note:
      - id must end with the same bean id from above
      - class must be the class of the SpringJobBeanWrapper, ie don't change it.
      - the beanId property must match the bean id from above
      - the jobName property is the text that will be rendered in the list of jobs in Sakai
  -->
  <bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.dashboardCollectionJob" class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper" init-method="init">
      <property name="beanId">
          <value>DashAggregateJob</value>
      </property>
      <property name="jobName">
          <value>Dashboard Aggregate Job</value>
      </property>
      <property name="schedulerManager">
          <ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
      </property>
  </bean>

  

  <bean id="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl.dashboard"
      class="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl">
      <property name="mappingResources">
          <list>
              <value>org/sakaiproject/dash/dao/JobRunImpl.hbm.xml</value>
          </list>
      </property>
  </bean>

  <bean id="org.sakaiproject.dash.dao.DashHibernateDaoTarget"
      class="org.sakaiproject.dash.dao.DashHibernateDao">
      <property name="sessionFactory">
          <ref bean="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory" />
      </property>
  </bean>

  <bean id="org.sakaiproject.dash.dao.DashHibernateDaoProxy"
      class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
      <property name="transactionManager">
          <ref bean="org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager" />
      </property>
      <property name="target">
          <ref bean="org.sakaiproject.dash.dao.DashHibernateDaoTarget" />
      </property>
      <property name="transactionAttributes">
          <props>
              <prop key="*">PROPAGATION_REQUIRED</prop>
          </props>
      </property>
  </bean>

    <!-- DashUpdateJob _______________________________________________________
__________________________________ -->
    <bean id="DashAggregateJob"
        class="org.sakaiproject.dash.jobs.DashAggregateJob"
        init-method="init">
        <!-- OPTIONS: -->
            <!-- Maximum number of processed events per job run. -->
            <property name="maxEventsPerRun" value="50000" />

            <!-- Number of processed events in each sql query. -->
            <property name="sqlBlockSize" value="1000" />

            <!-- Starting eventId to be processed.
                WARNING: This value is only read on the first job run; after that, job status is tracked in DASH_JOB_RUN table... If not specified, the job will use the most recent EVENT_ID from SAKAI_EVENT table when Sakai start s up.
             -->
            <!-- 
            <property name="startEventId" value="-1" />
            -->

            <!-- Specify db properties below if SAKAI_EVENT and SAKAI_SESSION tables lives on a different database of Sakai -->
            <!--
            <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
            <property name="url" value="jdbc:mysql://127.0.0.1:3306/GEPUV?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true"/>
            <property name="username" value="dbuser"/>
            <property name="password" value="dbpassword"/>
            -->
        <!-- /OPTIONS -->

        <!-- Sakai services -->
        <property name="dashHibernateDao" ref="org.sakaiproject.dash.dao.DashHibernateDaoTarget" />
        <property name="sqlService" ref="org.sakaiproject.db.api.SqlService" />
    	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
		<property name="dashboardLogic" ref="org.sakaiproject.dash.logic.DashboardLogic"></property>
    </bean>


   <!--  if you have multiple jobs you can wire them in here, simply copy the above example blocks and modify as needed -->
   
   <!-- This is the actual bean to execute (with an optional parameter that is consumed by the job)
	Things to note:
		- the 'id' is arbitrary but must be the same for this bean definition AND the following one
		- the 'class' is the fully qualified package name of your Java class
		- you can inject any properties or services into your job in this bean.
    -->
	<bean id="dashRepeatEventJob"
		class="org.sakaiproject.dash.jobs.DashRepeatEventJob">
		
		<property name="configMessage">
			<value>This is a quartz job to create dashboard repeating event instances</value>
		</property>
      	
      	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
		<property name="dashboardCommonLogic" ref="org.sakaiproject.dash.app.DashboardCommonLogic" />
		
	</bean>

	<!-- This is the helper that will register the above bean with the ScheduleManager
   	Things to note:
   		- id must end with the same bean id from above
   		- class must be the class of the SpringJobBeanWrapper, ie don't change it.
   		- the beanId property must match the bean id from above
   		- the jobName property is the text that will be rendered in the list of jobs in Sakai
	-->
	<bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.dashRepeatEventJob"
		class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		init-method="init">
		
		<property name="beanId">
			<value>dashRepeatEventJob</value>
		</property>
      
		<property name="jobName">
			<value>Dashboard Repeat Event Job</value>
		</property>
		
      	<property name="schedulerManager">
			<ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
		</property>
		
   </bean>
   
      <!-- This is the actual bean to execute (with an optional parameter that is consumed by the job)
	Things to note:
		- the 'id' is arbitrary but must be the same for this bean definition AND the following one
		- the 'class' is the fully qualified package name of your Java class
		- you can inject any properties or services into your job in this bean.
    -->
	<bean id="dashExpirePurgeJob"
		class="org.sakaiproject.dash.jobs.DashExpirePurgeJob">
		
		<property name="configMessage">
			<value>This is a quartz job to expire and purge dashboard links</value>
		</property>
      	
      	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
		<property name="dashboardCommonLogic" ref="org.sakaiproject.dash.app.DashboardCommonLogic" />
		
	</bean>

	<!-- This is the helper that will register the above bean with the ScheduleManager
   	Things to note:
   		- id must end with the same bean id from above
   		- class must be the class of the SpringJobBeanWrapper, ie don't change it.
   		- the beanId property must match the bean id from above
   		- the jobName property is the text that will be rendered in the list of jobs in Sakai
	-->
	<bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.dashExpirePurgeJob"
		class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		init-method="init">
		
		<property name="beanId">
			<value>dashExpirePurgeJob</value>
		</property>
      
		<property name="jobName">
			<value>Dashboard Expire Purge Job</value>
		</property>
		
      	<property name="schedulerManager">
			<ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
		</property>
		
   </bean>
   
   <!-- This is the actual bean to execute (with an optional parameter that is consumed by the job)
	Things to note:
		- the 'id' is arbitrary but must be the same for this bean definition AND the following one
		- the 'class' is the fully qualified package name of your Java class
		- you can inject any properties or services into your job in this bean.
    -->
	<bean id="dashCheckAvailabilityJob"
		class="org.sakaiproject.dash.jobs.DashCheckAvailabilityJob">
		
		<property name="configMessage">
			<value>This is a quartz job to check dasboard item availabilities</value>
		</property>
      	
      	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
		<property name="dashboardCommonLogic" ref="org.sakaiproject.dash.app.DashboardCommonLogic" />
		
	</bean>

	<!-- This is the helper that will register the above bean with the ScheduleManager
   	Things to note:
   		- id must end with the same bean id from above
   		- class must be the class of the SpringJobBeanWrapper, ie don't change it.
   		- the beanId property must match the bean id from above
   		- the jobName property is the text that will be rendered in the list of jobs in Sakai
	-->
	<bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.dashCheckAvailabilityJob"
		class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		init-method="init">
		
		<property name="beanId">
			<value>dashCheckAvailabilityJob</value>
		</property>
      
		<property name="jobName">
			<value>Dashboard Check Availability Job</value>
		</property>
		
      	<property name="schedulerManager">
			<ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
		</property>
		
   </bean>

   <!-- This is the actual bean to execute (with an optional parameter that is consumed by the job)
	Things to note:
		- the 'id' is arbitrary but must be the same for this bean definition AND the following one
		- the 'class' is the fully qualified package name of your Java class
		- you can inject any properties or services into your job in this bean.
    -->
	<bean id="dashCheckAdminChangesJob"
		class="org.sakaiproject.dash.jobs.DashCheckAdminChangesJob">
		
		<property name="configMessage">
			<value>This is a quartz job to check dasboard admin configuration changes</value>
		</property>
      	
      	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
		<property name="dashboardCommonLogic" ref="org.sakaiproject.dash.app.DashboardCommonLogic" />
		
	</bean>

	<!-- This is the helper that will register the above bean with the ScheduleManager
   	Things to note:
   		- id must end with the same bean id from above
   		- class must be the class of the SpringJobBeanWrapper, ie don't change it.
   		- the beanId property must match the bean id from above
   		- the jobName property is the text that will be rendered in the list of jobs in Sakai
	-->
	<bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.dashCheckAdminChangesJob"
		class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		init-method="init">
		
		<property name="beanId">
			<value>dashCheckAdminChangesJob</value>
		</property>
      
		<property name="jobName">
			<value>Dashboard Check Admin Configuration Changes Job</value>
		</property>
		
      	<property name="schedulerManager">
			<ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
		</property>
		
   </bean>
   
               <!-- This is the actual bean to execute (with an optional parameter that is consumed by the job)
	Things to note:
		- the 'id' is arbitrary but must be the same for this bean definition AND the following one
		- the 'class' is the fully qualified package name of your Java class
		- you can inject any properties or services into your job in this bean.
    -->
	<bean id="dashSyncUserSitesJob"
		class="org.sakaiproject.dash.jobs.DashSyncUserSitesJob">
		
		<property name="configMessage">
			<value>This is a quartz job to check dasboard item availabilities</value>
		</property>
      	
      	<property name="sakaiProxy" ref="org.sakaiproject.dash.app.SakaiProxy"></property>
		<property name="dashboardCommonLogic" ref="org.sakaiproject.dash.app.DashboardCommonLogic" />
		
	</bean>

	<!-- This is the helper that will register the above bean with the ScheduleManager
   	Things to note:
   		- id must end with the same bean id from above
   		- class must be the class of the SpringJobBeanWrapper, ie don't change it.
   		- the beanId property must match the bean id from above
   		- the jobName property is the text that will be rendered in the list of jobs in Sakai
	-->
	<bean id="org.sakaiproject.api.app.scheduler.JobBeanWrapper.dashSyncUserSitesJob"
		class="org.sakaiproject.component.app.scheduler.jobs.SpringJobBeanWrapper"
		init-method="init">
		
		<property name="beanId">
			<value>dashSyncUserSitesJob</value>
		</property>
      
		<property name="jobName">
			<value>Dashboard Synchronize Dashboard Link Users with Site Users Job</value>
		</property>
		
      	<property name="schedulerManager">
			<ref bean="org.sakaiproject.api.app.scheduler.SchedulerManager" />
		</property>
		
   </bean>

</beans>
