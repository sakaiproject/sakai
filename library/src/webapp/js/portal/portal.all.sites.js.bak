/**
 * For More Sites in Morpheus
 */

let modalFocusableItems, panelLastButton;

var dhtml_view_sites = function () {

  const modal = document.getElementById("select-site-modal");
  const otherSitesPanel = document.getElementById("otherSitesCategorWrap");
  const organizeFavSitesPanel = document.getElementById("organizeFavorites");

  modal.show();

  if (!modalFocusableItems || !panelLastButton) {
    // Find focusable items in the modal, including otherSitesPanel elements
    // + #autoFavoritesEnabled switch from organizeFavSitesPanel.
    //modalFocusableItems = modal.find('button, a');
    modalFocusableItems = modal.querySelectorAll("button, a");
    // The last button inside otherSitesPanel, should be .toolMenus expand arrow.
    panelLastButton = modal.querySelector("button.toolMenus:last");
  }

  // Lock the focus into the modal links
  modal.addEventListener("keydown", e => {

    let cancel = false;
    if (e.ctrlKey || e.metaKey || e.altKey) {
      return;
    }
    switch (e.which) {
      case 27: // ESC
        closeDrawer();
        cancel = true;
        break;
      case 9: // TAB
        const siteToolsList = document.getElementById("otherSiteTools");
        // If a siteToolsList item is focused.
        if (siteToolsList.contains(e.target)) {
          const listExpandArrow = siteToolsList.previousSibling;
          listExpandArrow.isEqualNode(panelLastButton) && modalFocusableItems[0].focus();
          if (e.shiftKey) {
            listExpandArrow.focus();
          } else {
            modalFocusableItems.forEach((item, i) => {
              listExpandArrow.isEqualNode(item) && modalFocusableItems[i + 1].focus();
            });
          }
          // Close siteToolsList when losing focus.
          document.querySelectorAll(".toolMenus").forEach(el => {
            el.classList.remove("toolMenusActive");
            el.setAttribute("aria-expanded", "false");
          });
          document.getElementById("otherSiteTools").remove();
          cancel = true;
        }
        if (e.shiftKey) {
          if (e.target.isEqualNode(modalFocusableItems[0])) {
            if (organizeFavSitesPanel.style.display === "block") {
              modalFocusableItems[modalFocusableItems.length - 1].focus();
            } else {
              panelLastButton[panelLastButton.length - 1].focus();
            }
            cancel = true;
          }
        } else if (e.target.isEqualNode(modalFocusableItems[modalFocusableItems.length - 1])
              || e.target.isEqualNode(panelLastButton[panelLastButton.length - 1])) {
          modalFocusableItems[0].focus();
          cancel = true;
        }
        break;
    }
    if (cancel) {
      e.preventDefault();
    }
  });
}

//$PBJQ(document).ready(function () {

  // Open all Sites with mobile view
  //document.getElementById("sakai-view-all-sites")?.addEventListener("click", dhtml_view_sites);

  // prepend site title to tool title
  // here as reminder to work on an actual breadcrumb integrated with neo style tool updates
  let siteTitle = portal.siteTitle;

  if (siteTitle && portal.shortDescription) {
    siteTitle = `${siteTitle} (${portal.shortDescription})`;
    document.querySelectorAll(".portletTitle h2").forEach(el => {
      el.insertAdjacentHTML("beforebegin", `<span class=\"siteTitle\">${siteTitle}:</span>`);
    });
  }

  const searchInput = document.getElementById("search-all-sites");
  searchInput && searchInput.addEventListener("keyup", event => {

    if (event.keyCode == 27) {
      resetSearch();
    }

    if (searchInput.value.length > 0) {
      const queryString = searchInput.value.toLowerCase();

      document.querySelectorAll(".fav-sites-term, .fav-sites-entry")
        .forEach(el => el.style.display = "none");

      const matchedSites = Array.from(document.querySelectorAll(".fav-sites-entry")).filter(el => {
        return entry.querySelector(".fav-title a span.fullTitle").textContent.toLowerCase().indexOf(queryString) >= 0;
      });

      matchedSites.forEach(el => {

        el.style.display = "initial";
        const term = el.closest(".fav-sites-term");
        term && (term.style.display = "initial");
      });
    } else {
      resetSearch();
    }

    // Should be <=1 if there is a header line
    if (document.querySelectorAll("#otherSiteList li:visible").length < 1
          && document.querySelectorAll(".otherSitesCategorList li:visible").length < 1) {
      document.getElementById("no-search-results").style.display = "initial";
    }
  });

  function resetSearch() {

    const searchInput = document.getElementById("search-all-sites");
    searchInput && (searchInput.value = "");
    searchInput?.focus();
    document.querySelectorAll(".fav-sites-term, .fav-sites-entry").forEach(el => el.style.display = "initial");
    const noResults = document.getElementById("no-search-results");
    noResults && (noResults.style.display = "none");
  }
//});


//$PBJQ(document).ready(function ($) {
  // The list of favorites currently stored
  var autoFavoritesEnabled = true;

  // Keep a copy of the favoritesList as it was before any changes were made.
  // If the user makes a set of changes that ultimately revert us back to where we
  // started, we don't need to show the indicator to reload the page.
  let initialFavoritesList = undefined;

  const favoritesList = [];

  const maxFavoriteEntries = document.getElementById("max-favorite-entries").textContent.trim();

  // True if we've finished fetching and displaying the initial list
  //
  // Used to ensure we don't inadvertently save an empty list of favorites if
  // the user gets in too quickly
  var favoritesLoaded = false;

  var container = document.getElementById("selectSite");
  var favoritesPane = document.getElementById('otherSitesCategorWrap');
  var organizePane = document.getElementById('organizeFavorites');
  var topNavPane = document.getElementById('topnav');

  // Keep a copy of the order of the sites across the top bar in case a user
  // unpins and then repins a site to the top bar without refreshing: the order
  // of the sites should remain the same
  var setInitialTopBarSiteDisplayOrder = function () {
    return $PBJQ('.Mrphs-sitesNav__favbtn', topNavPane).map(function () {
      return $PBJQ(this).data('site-id');
    }).toArray();
  };

  var initialTopBarSiteDisplayOrder = setInitialTopBarSiteDisplayOrder();

  // Build up a map of siteid => list item.  Do this instead of an ID
  // selector to cope with Site IDs containing strange characters.
  var itemsBySiteId = {};
  $PBJQ('.site-favorite-btn', favoritesPane).each(function (i, e) {
    itemsBySiteId[$PBJQ(e).attr('data-site-id')] = $PBJQ(e).parent();
  });

  var button_states = {
    favorite: {
      markup: '<i class="site-favorite-icon site-favorite" aria-hidden="true"></i>'
    },
    nonfavorite: {
      markup: '<i class="site-favorite-icon site-nonfavorite" aria-hidden="true"></i>'
    },
    myworkspace: {
      markup: '<i class="site-favorite-icon site-workspace site-favorite" aria-hidden="true"></i>'
    }
  };

  var getUserFavorites = function (callback) {
    $PBJQ.ajax({
      url: '/portal/favorites/list',
      method: 'GET',
      dataType: 'json',
      success: function (data) {
        autoFavoritesEnabled = data.autoFavoritesEnabled;

        favoritesList = data.favoriteSiteIds.filter(function (e, i) {
          return e != '';
        });

        if (initialFavoritesList == undefined) {
          initialFavoritesList = favoritesList;
        }

        callback(favoritesList);
      }
    });
  };

  var setButton = function (btn, state) {
    var entry = button_states[state];

    $PBJQ(btn).data('favorite-state', state);

    if (state === 'favorite') {
      $PBJQ(btn).attr('aria-pressed', true);
    } else if (state === 'nonfavorite') {
      $PBJQ(btn).attr('aria-pressed', false);
    } else {
      $PBJQ(btn).attr('aria-pressed', undefined);
    }

    $PBJQ(btn).empty().append($PBJQ(entry.markup));
  };

  var renderFavoriteCount = function () {
    var favoriteCount = $PBJQ('.fav-sites-entry .site-favorite', favoritesPane).length;

    $PBJQ('.favoriteCount', container).text('(' + favoriteCount + ')');

    if (favoriteCount > maxFavoriteEntries) {
      $PBJQ('.favoriteCountAndWarning').addClass('maxFavoritesReached');
    } else {
      $PBJQ('.favoriteCountAndWarning').removeClass('maxFavoritesReached');
    }
  };

  var setAllOrNoneStarStates = function () {
    $PBJQ('.favorites-select-all-none', favoritesPane).each(function (idx, selectAllNone) {
      var termContainer = $PBJQ(selectAllNone).closest('.fav-sites-term');

      var siteCount = termContainer.find('.fav-sites-entry:not(.my-workspace)').length;
      var favoritedSiteCount = termContainer.find('.fav-sites-entry .site-favorite').length;

      if (siteCount == 0) {
        // No favoritable sites under this section
        $PBJQ(selectAllNone).hide();
      } else {
        if (favoritedSiteCount == siteCount) {
          $PBJQ(selectAllNone).data('favorite-state', 'favorite');
          $PBJQ(selectAllNone).html(button_states.favorite.markup);
          $PBJQ(selectAllNone).attr('aria-pressed', true);
        } else {
          $PBJQ(selectAllNone).data('favorite-state', 'nonfavorite');
          $PBJQ(selectAllNone).html(button_states.nonfavorite.markup);
          $PBJQ(selectAllNone).attr('aria-pressed', false);
        }

        $PBJQ(selectAllNone).show();
      }
    });
  };

  var hideFavoriteButtons = function () {
    $PBJQ('.site-favorite-btn', favoritesPane).empty();
    $PBJQ('.favorites-select-all-none', favoritesPane).empty();
  };

  var renderFavorites = function (favorites) {
    $PBJQ('.site-favorite-btn', favoritesPane).each(function (idx, btn) {
      var buttonSiteId = $PBJQ(btn).attr('data-site-id');

      if ($PBJQ(btn).closest('.my-workspace').length > 0) {
        setButton(btn, 'myworkspace');
      } else {
        if ($PBJQ.inArray(buttonSiteId, favorites) >= 0) {
          setButton(btn, 'favorite');
        } else {
          setButton(btn, 'nonfavorite');
        }
      }
    });

    $PBJQ('.favorites-help-text').hide();

    if (autoFavoritesEnabled) {
      $PBJQ('.favorites-help-text.autofavorite-enabled').show();
    } else {
      $PBJQ('.favorites-help-text.autofavorite-disabled').show();
    }

    setAllOrNoneStarStates();
    renderFavoriteCount();

    favoritesLoaded = true;
  };

  var listFavorites = function () {
    // Any favorite button with the 'site-favorite' class has been starred.
    return $PBJQ('.site-favorite-btn', favoritesPane).has('.site-favorite').map(function () {
      return $PBJQ(this).attr('data-site-id');
    }).toArray();
  }

  /**
   * @func syncFavoritesToServer
   * @desc Reusable method to sync fav changes to the server
   * @param {Array} favs  - List of SiteIds to be used as favourites
   * @param {Function} onError  - Error function to be called on AJAX failure 
   */
  var syncFavoritesToServer = function (favs, onError) {

    if (!onError) {
      onError = function (err) { };
    }

    var newState = {
      favoriteSiteIds: favs,
      autoFavoritesEnabled: autoFavoritesEnabled,
    };

    $PBJQ.ajax({
      url: '/portal/favorites/update',
      method: 'POST',
      data: {
        userFavorites: JSON.stringify(newState),
      },
      error: onError
    });

    // Update the list
    favoritesList = favs;
  }

  /**
   * @func topNavFavorite
   * @desc Toggles favouriting from the top navigation
   * @param {*} event  - jQuery Event for item clicked
   */
  var toggleTopNavFavorite = function (event) {
    event.preventDefault();

    var thisFavButton = $PBJQ(event.target);
    var newFavId = thisFavButton.data("site-id");

    getUserFavorites(function (list) {
      var favs = list;
      var ind = favs.indexOf(newFavId);

      if (ind === -1) {
        // Add Fav
        var favIdIndex = initialTopBarSiteDisplayOrder.indexOf(newFavId);
        if (favIdIndex !== -1) {
          // Inserting the site id into the previous location of the favorites array to 
          // maintain the site's location on the top bar, if toggled off then back on 
          // without a page reload:
          favs.splice(favIdIndex, 0, newFavId);
        } else {
          // Was not in the original list of favorites, so we'll add the site to the end:
          favs.push(newFavId);
        }
      } else {
        // Remove Fav
        favs.splice(ind, 1)
      }

      // Toggle the classes, so the opposite star appears
      thisFavButton.toggleClass("non-fav");
      thisFavButton.toggleClass("fav");

      // Use plain JS to toggle the value of the aria-checked attribute
      var thisFavButtonForJS = thisFavButton[0];
      if (thisFavButtonForJS.getAttribute("aria-checked") === "true") {
        thisFavButtonForJS.setAttribute("aria-checked", "false");
      } else {
        thisFavButtonForJS.setAttribute("aria-checked", "true");
      }

      syncFavoritesToServer(favs);
    });
  };

  // Add the fav toggle to the top-nav buttons
  $PBJQ(".Mrphs-sitesNav__favbtn").each(function (i, e) {
    return $PBJQ(e).click(toggleTopNavFavorite);
  });

  var loadFromServer = function (attempt) {
    if (syncInProgress) {
      // Don't let the user edit the current state if we know it's going to be invalidated.
      favoritesLoaded = false;
      hideFavoriteButtons();
    }

    if (!attempt) {
      attempt = 0;
    }

    if (syncInProgress && attempt < 100) {
      setTimeout(function () {
        loadFromServer(attempt + 1);
      }, 50);
    } else {
      getUserFavorites(renderFavorites);
    }
  };

  var arrayEqual = function (a1, a2) {
    if (a1.length != a2.length) {
      return false;
    }

    for (var i = 0; i < a1.length; i++) {
      if (a1[i] != a2[i]) {
        return false;
      }
    }

    return true;
  };

  var showRefreshNotification = function () {

    if (arrayEqual(favoritesList, initialFavoritesList)) {
      // The user is back to where they started!
      $PBJQ('.moresites-refresh-notification').remove();
      return;
    }

    if ($PBJQ('.moresites-refresh-notification').length > 0) {
      // Already got it
      return;
    }

    var notification = $PBJQ('<div class="moresites-refresh-notification" />')
      .html(document.getElementById('refreshNotificationText').html());

    $PBJQ("#loginLinks").prepend(notification);

    notification.css('top', ($PBJQ('.Mrphs-siteHierarchy').offset().top) + 'px');
  };

  var syncInProgress = false;
  var nextToSync = [];

  // The user might go crazy with the clicky, so queue our updates so they run
  // in a defined order.
  var runNextServerUpdate = function (onError) {
    var newState;

    // we can skip intermediate updates because they'll just get overwritten anyway.
    while (nextToSync.length > 0) {
      newState = nextToSync.shift();
    }

    if (newState) {
      $PBJQ.ajax({
        url: '/portal/favorites/update',
        method: 'POST',
        dataType: 'json',
        data: {
          userFavorites: JSON.stringify(newState),
        },
        error: onError,
        complete: runNextServerUpdate
      });
    } else {
      // All done!
      syncInProgress = false;
    }
  };

  var syncWithServer = function (onError) {
    if (!favoritesLoaded) {
      return;
    }

    if (!onError) {
      onError = function () { };
    }

    var newFavorites = listFavorites();

    // Retain the sort ordering of our original list, adding new items to the end
    newFavorites = newFavorites.sort(function (a, b) {
      if (favoritesList.indexOf(a) === -1) {
        return 1;
      } else if (favoritesList.indexOf(b) === -1) {
        return -1;
      } else {
        return favoritesList.indexOf(a) - favoritesList.indexOf(b);
      }
    });

    var newState = {
      favoriteSiteIds: newFavorites,
      autoFavoritesEnabled: autoFavoritesEnabled,
    };

    nextToSync.push(newState);

    if (syncInProgress) {
      /* It'll up our next state when it next runs */
    } else {
      syncInProgress = true;
      runNextServerUpdate(onError);
    };

    // Finally, update our stored list of favorites
    favoritesList = newFavorites;
    showRefreshNotification();
  };

  var returnElementToOriginalPositionIfPossible = function (siteId) {
    if (initialFavoritesList && initialFavoritesList.indexOf(siteId) > -1) {
      var idx = initialFavoritesList.indexOf(siteId);

      // We'll attempt to place our item to the right its original left
      // neighbor.  If the left neighbor was removed too, keep scanning left
      // until we find one of the original elements and place it to the right.
      // Otherwise, insert at the beginning of the array.
      //
      // The intention here is to allow multiple elements to be removed and
      // re-added in arbitrary order, and to reproduce the original ordering.

      var placed = false;

      for (var neighborIdx = idx - 1; neighborIdx >= 0; neighborIdx--) {
        var neighbor = initialFavoritesList[neighborIdx];

        var neighborCurrentIndex = favoritesList.indexOf(neighbor);

        if (neighborCurrentIndex >= 0 && neighborCurrentIndex < idx) {
          /* Place our element after it */
          favoritesList.splice(neighborCurrentIndex + 1, 0, siteId)
          placed = true;
          break;
        }
      }

      if (!placed) {
        // place at the beginning
        favoritesList.splice(idx, 0, siteId)
      }
    }
  };

  $PBJQ(favoritesPane).addEventListener('click', '.site-favorite-btn', function () {
    var self = this;

    var siteId = $PBJQ(self).attr('data-site-id');
    var originalState = $PBJQ(self).data('favorite-state');

    if (originalState === 'myworkspace') {
      // No unfavoriting your workspace!
      return;
    }

    var newState;

    if (originalState === 'favorite') {
      newState = 'nonfavorite';
    } else {
      newState = 'favorite';
    }

    // If a favorite has been added that was removed and re-added during this
    // same session, put it back in the same slot rather than sending it to the
    // end
    if (newState == 'favorite') {
      returnElementToOriginalPositionIfPossible(siteId);
    }

    setButton(self, newState);
    setAllOrNoneStarStates();
    renderFavoriteCount();

    syncWithServer(function () {
      // If anything goes wrong while saving, refresh from the server.
      loadFromServer();
    });
  });

  $PBJQ(favoritesPane).addEventListener('click', '.favorites-select-all-none', function () {
    var state = $PBJQ(this).data('favorite-state');
    var buttons = $PBJQ(this).closest('.fav-sites-term').find('.fav-sites-entry:not(.my-workspace) .site-favorite-btn');

    var newState;

    if (state == 'favorite') {
      newState = 'nonfavorite';
    } else {
      newState = 'favorite';
    }

    buttons.each(function (idx, button) {
      setButton($PBJQ(button), newState);
    });

    renderFavoriteCount();
    setAllOrNoneStarStates();

    syncWithServer(function () {
      // If anything goes wrong while saving, refresh from the server.
      loadFromServer();
    });
  });

  $PBJQ(container).addEventListener('click', '.tab-btn', function () {
    $PBJQ('.tab-btn', container).removeClass('active').attr('aria-selected', 'false').attr('tabindex', '-1');
    $PBJQ(this).addClass('active').attr('aria-selected', 'true').attr('tabindex', '0');

    var panel = $PBJQ(this).data('tab-target');

    $PBJQ('.tab-box').hide();
    $PBJQ(container).trigger('tab-shown', panel);
    document.getElementById('' + panel).show();
  });

  // Arrow and spacebar nav for tabs
  $PBJQ(container).addEventListener('keydown', '.tab-btn', function (e) {
    if (e.keyCode == 32) {
      $PBJQ(this).click();
      e.preventDefault();
    }
    if (e.keyCode == 37) {
      $PBJQ("[aria-selected=true]").prev().click().focus();
      e.preventDefault();
    }
    if (e.keyCode == 38) {
      $PBJQ("[aria-selected=true]").prev().click().focus();
      e.preventDefault();
    }
    if (e.keyCode == 39) {
      $PBJQ("[aria-selected=true]").next().click().focus();
      e.preventDefault();
    }
    if (e.keyCode == 40) {
      $PBJQ("[aria-selected=true]").next().click().focus();
      e.preventDefault();
    }
  });

  $PBJQ(document).addEventListener('view-sites-shown', function () {
    loadFromServer();
  });

  $PBJQ(container).addEventListener('tab-shown', function (e, panelId) {
    if (panelId === 'organizeFavorites') {
      // Build our organize favorites screen based on the current set of
      // favorites
      var list = document.getElementById('organizeFavoritesList');
      list.empty();

      document.getElementById('noFavoritesToShow').hide();
      document.getElementById('favoritesToShow').hide();

      // Collapse any visible tool menus
      document.getElementById('otherSiteTools').remove();

      document.getElementById('organizeFavoritesPurgatoryList').empty();

      $PBJQ.each(favoritesList, function (idx, siteid) {
        if (!itemsBySiteId[siteid]) {
          // Skip any favorite site that wasn't properly found for some reason
          // (this might happen if the user's favorites list contains sites that
          // they've had their access revoked from)
          return;
        }

        if ($PBJQ(itemsBySiteId[siteid]).hasClass('my-workspace')) {
          // Don't show an entry for the user's workspace since it can't be rearranged anyway.
          return;
        }

        var favoriteItem = itemsBySiteId[siteid].clone(false);

        favoriteItem.addClass('organize-favorite-item').data('site-id', siteid);
        var dragHandle = $PBJQ('<div class="fav-drag-handle only-icon-btn"><i class="fa fa-bars"></i></div>');

        // Hide the tool dropdown
        $PBJQ('.toolMenus', favoriteItem).remove();

        // Show a drag handle
        favoriteItem.append(dragHandle);

        list.append(favoriteItem);

        // Make sure the item is visible, just in case it was hidden on the other tab
        favoriteItem.show();
      });

      if (list.find('li').length == 0) {
        // No favorites are present
        document.getElementById('noFavoritesToShow').show();
      } else {
        document.getElementById('favoritesToShow').show();
      }

      var highlightMaxItems = function () {
        var items = $PBJQ('.organize-favorite-item');

        items.removeClass('site-favorite-is-past-max');
        $PBJQ('.favorites-max-marker').remove();

        $PBJQ.each(items, function (idx, li) {
          if (idx >= maxFavoriteEntries) {
            $PBJQ(li).addClass('site-favorite-is-past-max');
          }

          if (idx == maxFavoriteEntries) {
            $PBJQ(li).before($PBJQ('<li class="favorites-max-marker"><i class="fa fa-warning warning-icon"></i> ' + document.getElementById('maxFavoritesLimitReachedText').text() + '</li>'));
          }
        });
      };

      highlightMaxItems();

      list.keyboardSortable({
        items: "li:not(.favorites-max-marker)",
        handle: ".fav-drag-handle",
        update: function () {
          // Rehighlight the first N items
          highlightMaxItems();

          // Update our ordering based on the new selection
          favoritesList = list.find('.organize-favorite-item *[data-site-id]').map(function () {
            return $PBJQ(this).attr('data-site-id');
          }).toArray();

          // and send it all to the server
          syncWithServer();
        }
      });

      list.disableSelection();

      document.getElementById('autoFavoritesEnabled').attr('aria-checked', autoFavoritesEnabled);
      document.getElementById('organizeFavorites .onoffswitch').show();
    }
  });

  modal.querySelectorAll(".site-favorite-btn").forEach(btn => {

    btn.addEventListener("click", function (e) {

      const self = this;

      if (self.closest('.my-workspace')) {
        // No unfavoriting your workspace!
        return;
      }

      var li = self.parent();

      var buttonState;

      if (!self.closest('#organizeFavoritesList')) {
        // The clicked item was currently in "purgatory", having been unfavorited
        // in the process of organizing favorites.  This click will promote it
        // back to a favorite
        var siteId = self.dataset.siteId;
        //returnElementToOriginalPositionIfPossible(siteId)

        var newIndex = favoritesList.indexOf(siteId);

        if (newIndex == 0) {
          document.getElementById('organizeFavoritesList').prepend(li);
        } else if (newIndex > 0) {
          // Put it into the right position (note: nth-child starts indexing at 1)
          document.getElementById(`organizeFavoritesList li:nth-child(${newIndex})`).after(li);
        } else {
          // Just tack it on the end
          document.getElementById('organizeFavoritesList').append(li);
        }

        buttonState = 'favorite';
      } else {
        // This item has just been unfavorited.  To purgatory!
        document.getElementById('organizeFavoritesPurgatoryList').append(li);
        buttonState = 'nonfavorite';
      }

      // Set the favorite state for both the entry under "Organize" and the
      // original entry under "Sites"
      setButton(self, buttonState);
      setButton(itemsBySiteId[self.dataset.siteId].find('.site-favorite-btn'), buttonState);

      //setAllOrNoneStarStates();
      //renderFavoriteCount();

      /*
      syncWithServer(function () {
        // If anything goes wrong while saving, refresh from the server.
        loadFromServer();
      });
      */
  });

  const autoFavoritesCheckbox = document.getElementById('autoFavoritesEnabled');

  autoFavoritesCheckbox.addEventListener("click", () => {

    $PBJQ(this).attr('aria-checked', function (index, clicked) {
      var pressed = (clicked === 'true');
      return String(!pressed);
    });
    $PBJQ(this).trigger('change');
  });

  autoFavoritesCheckbox.addEventListener('change', function () {

    autoFavoritesEnabled = $PBJQ(this).attr('aria-checked') === 'true';

    $PBJQ('.favorites-help-text').hide();

    if (autoFavoritesEnabled) {
      $PBJQ('.favorites-help-text.autofavorite-enabled').show();
    } else {
      $PBJQ('.favorites-help-text.autofavorite-disabled').show();
    }

    syncWithServer();
    return true;
  });

  document.querySelectorAll(".otherSitesMenuClose").forEach(el => {
    el.addEventListener('click', () => closeDrawer());
  });

//});
