var fluid_1_5=fluid_1_5||{},fluid=fluid||fluid_1_5;!function($,fluid){"use strict";fluid.registerNamespace("fluid.model.transform"),fluid.defaults("fluid.transformFunction",{gradeNames:"fluid.function"}),fluid.defaults("fluid.standardInputTransformFunction",{gradeNames:"fluid.transformFunction"}),fluid.defaults("fluid.standardOutputTransformFunction",{gradeNames:"fluid.transformFunction"}),fluid.defaults("fluid.multiInputTransformFunction",{gradeNames:"fluid.transformFunction"}),fluid.defaults("fluid.standardTransformFunction",{gradeNames:["fluid.standardInputTransformFunction","fluid.standardOutputTransformFunction"]}),fluid.defaults("fluid.lens",{gradeNames:"fluid.transformFunction",invertConfiguration:null}),fluid.model.transform.pathToRule=function(inputPath){return{transform:{type:"fluid.transforms.value",inputPath:inputPath}}},fluid.model.transform.literalValueToRule=function(value){return{transform:{type:"fluid.transforms.literalValue",value:value}}},fluid.model.composePaths=function(prefix,suffix){return prefix=0===prefix?"0":prefix||"",suffix=0===suffix?"0":suffix||"",prefix?suffix?prefix+"."+suffix:prefix:suffix},fluid.model.transform.accumulateInputPath=function(inputPath,transform,paths){void 0!==inputPath&&paths.push(fluid.model.composePaths(transform.inputPrefix,inputPath))},fluid.model.transform.accumulateStandardInputPath=function(input,transformSpec,transform,paths){fluid.model.transform.getValue(void 0,transformSpec[input],transform),fluid.model.transform.accumulateInputPath(transformSpec[input+"Path"],transform,paths)},fluid.model.transform.accumulateMultiInputPaths=function(inputVariables,transformSpec,transform,paths){fluid.each(inputVariables,function(v,k){fluid.model.transform.accumulateStandardInputPath(k,transformSpec,transform,paths)})},fluid.model.transform.getValue=function(inputPath,value,transform){var togo;return void 0!==inputPath&&(togo=fluid.get(transform.source,fluid.model.composePaths(transform.inputPrefix,inputPath),transform.resolverGetConfig)),void 0===togo&&(togo=fluid.isPrimitive(value)?value:transform.expand(value)),togo},fluid.model.transform.NONDEFAULT_OUTPUT_PATH_RETURN={},fluid.model.transform.setValue=function(userOutputPath,value,transform,merge){var toset=fluid.copy(value),outputPath=fluid.model.composePaths(transform.outputPrefix,userOutputPath);return void 0!==toset&&transform.applier.requestChange(outputPath,toset,merge?"MERGE":void 0),userOutputPath?fluid.model.transform.NONDEFAULT_OUTPUT_PATH_RETURN:toset},fluid.model.transform.resolveParam=function(transformSpec,transform,key,def){var val=fluid.model.transform.getValue(transformSpec[key+"Path"],transformSpec[key],transform);return void 0!==val?val:def},fluid.deepEquals=function(expected,actual,stats){fluid.isPrimitive(expected)?expected===actual?++stats.matchCount:(++stats.mismatchCount,stats.messages.push("Value mismatch at path "+stats.path+": expected "+expected+" actual "+actual)):typeof expected!=typeof actual?(++stats.mismatchCount,stats.messages.push("Type mismatch at path "+stats.path+": expected "+typeof expected+" actual "+typeof actual)):fluid.each(expected,function(value,key){stats.pathOps.push(key),fluid.deepEquals(expected[key],actual[key],stats),stats.pathOps.pop(key)})},fluid.model.transform.matchValue=function(expected,actual){if(fluid.isPrimitive(expected))return expected===actual?1:0;var stats={matchCount:0,mismatchCount:0,messages:[]};return fluid.model.makePathStack(stats,"path"),fluid.deepEquals(expected,actual,stats),stats.matchCount},fluid.model.transform.compareMatches=function(speca,specb){return specb.matchCount-speca.matchCount},fluid.firstDefined=function(a,b){return void 0===a?b:a},fluid.model.transform.prefixApplier=function(transformSpec,transform){transformSpec.inputPrefix&&transform.inputPrefixOp.push(transformSpec.inputPrefix),transformSpec.outputPrefix&&transform.outputPrefixOp.push(transformSpec.outputPrefix),transform.expand(transformSpec.value),transformSpec.inputPrefix&&transform.inputPrefixOp.pop(),transformSpec.outputPrefix&&transform.outputPrefixOp.pop()},fluid.defaults("fluid.model.transform.prefixApplier",{gradeNames:["fluid.transformFunction"]}),fluid.model.makePathStack=function(transform,prefixName){var stack=transform[prefixName+"Stack"]=[];return transform[prefixName]="",{push:function(prefix){var newPath=fluid.model.composePaths(transform[prefixName],prefix);stack.push(transform[prefixName]),transform[prefixName]=newPath},pop:function(){transform[prefixName]=stack.pop()}}},fluid.model.transform.aliasStandardInput=function(transformSpec){return{value:void 0===transformSpec.value?transformSpec.input:transformSpec.value,valuePath:void 0===transformSpec.valuePath?transformSpec.inputPath:transformSpec.valuePath}},fluid.model.transform.doTransform=function(transformSpec,transform,transformOpts){var expdef=transformOpts.defaults,transformFn=fluid.getGlobalValue(transformOpts.typeName);"function"!=typeof transformFn&&fluid.fail("Transformation record specifies transformation function with name "+transformSpec.type+" which is not a function - ",transformFn),fluid.hasGrade(expdef,"fluid.transformFunction")||(expdef=fluid.defaults("fluid.standardTransformFunction"));var transformArgs=[transformSpec,transform];if(fluid.hasGrade(expdef,"fluid.standardInputTransformFunction")){var valueHolder=fluid.model.transform.aliasStandardInput(transformSpec),expanded=fluid.model.transform.getValue(valueHolder.valuePath,valueHolder.value,transform);if(transformArgs.unshift(expanded),void 0===expanded)return void 0}else if(fluid.hasGrade(expdef,"fluid.multiInputTransformFunction")){var inputs={};fluid.each(expdef.inputVariables,function(v,k){inputs[k]=function(){var input=fluid.model.transform.getValue(transformSpec[k+"Path"],transformSpec[k],transform);return input=void 0===input&&null!==v?v:input}}),transformArgs.unshift(inputs)}var transformed=transformFn.apply(null,transformArgs);if(fluid.hasGrade(expdef,"fluid.standardOutputTransformFunction")){var outputPath=void 0!==transformSpec.outputPath?transformSpec.outputPath:transformOpts.doOutput?"":void 0;void 0!==outputPath&&void 0!==transformed&&(fluid.model.transform.setValue(transformSpec.outputPath,transformed,transform,transformSpec.merge),transformed=void 0)}return transformed},fluid.model.transform.expandWildcards=function(transform,source){fluid.each(source,function(value,key){var q=transform.queuedTransforms;transform.pathOp.push(fluid.pathUtil.escapeSegment(key.toString()));for(var i=0;i<q.length;++i)if(fluid.pathUtil.matchPath(q[i].matchPath,transform.path,!0)){var esCopy=fluid.copy(q[i].transformSpec);(void 0===esCopy.inputPath||fluid.model.transform.hasWildcard(esCopy.inputPath))&&(esCopy.inputPath=""),transform.inputPrefixOp.push(transform.path),transform.outputPrefixOp.push(transform.path);var transformOpts=fluid.model.transform.lookupType(esCopy.type),result=fluid.model.transform.doTransform(esCopy,transform,transformOpts);void 0!==result&&fluid.model.transform.setValue(null,result,transform),transform.outputPrefixOp.pop(),transform.inputPrefixOp.pop()}fluid.isPrimitive(value)||fluid.model.transform.expandWildcards(transform,value),transform.pathOp.pop()})},fluid.model.transform.hasWildcard=function(path){return"string"==typeof path&&-1!==path.indexOf("*")},fluid.model.transform.maybePushWildcard=function(transformSpec,transform){var matchPath,hw=fluid.model.transform.hasWildcard;return hw(transformSpec.inputPath)?matchPath=fluid.model.composePaths(transform.inputPrefix,transformSpec.inputPath):(hw(transform.outputPrefix)||hw(transformSpec.outputPath))&&(matchPath=fluid.model.composePaths(transform.outputPrefix,transformSpec.outputPath)),matchPath?(transform.queuedTransforms.push({transformSpec:transformSpec,outputPrefix:transform.outputPrefix,inputPrefix:transform.inputPrefix,matchPath:matchPath}),!0):!1},fluid.model.sortByKeyLength=function(inObject){var keys=fluid.keys(inObject);return keys.sort(fluid.compareStringLength(!0))},fluid.model.transform.handleTransformStrategy=function(transformSpec,transform,transformOpts){return fluid.model.transform.maybePushWildcard(transformSpec,transform)?void 0:fluid.model.transform.doTransform(transformSpec,transform,transformOpts)},fluid.model.transform.handleInvertStrategy=function(transformSpec,transform,transformOpts){var invertor=transformOpts.defaults&&transformOpts.defaults.invertConfiguration;if(invertor){var inverted=fluid.invokeGlobalFunction(invertor,[transformSpec,transform]);transform.inverted.push(inverted)}},fluid.model.transform.handleCollectStrategy=function(transformSpec,transform,transformOpts){var defaults=transformOpts.defaults,standardInput=fluid.hasGrade(defaults,"fluid.standardInputTransformFunction"),multiInput=fluid.hasGrade(defaults,"fluid.multiInputTransformFunction");if(standardInput)fluid.model.transform.accumulateStandardInputPath("input",transformSpec,transform,transform.inputPaths);else if(multiInput)fluid.model.transform.accumulateMultiInputPaths(defaults.inputVariables,transformSpec,transform,transform.inputPaths);else{var collector=defaults.collectInputPaths;if(collector){var collected=fluid.makeArray(fluid.invokeGlobalFunction(collector,[transformSpec,transform]));transform.inputPaths=transform.inputPaths.concat(collected)}}},fluid.model.transform.lookupType=function(typeName,transformSpec){typeName||fluid.fail("Transformation record is missing a type name: ",transformSpec),-1===typeName.indexOf(".")&&(typeName="fluid.transforms."+typeName);var defaults=fluid.defaults(typeName);return{defaults:defaults,typeName:typeName}},fluid.model.transform.processRule=function(rule,transform){"string"==typeof rule?rule=fluid.model.transform.pathToRule(rule):rule.literalValue&&""!==transform.outputPrefix&&(rule=fluid.model.transform.literalValueToRule(rule.literalValue));var togo;if(rule.transform){var transformSpec,transformOpts;if(fluid.isArrayable(rule.transform)){var transforms=rule.transform;togo=void 0;for(var i=0;i<transforms.length;++i)transformSpec=transforms[i],transformOpts=fluid.model.transform.lookupType(transformSpec.type),transform.transformHandler(transformSpec,transform,transformOpts)}else transformSpec=rule.transform,transformOpts=fluid.model.transform.lookupType(transformSpec.type),togo=transform.transformHandler(transformSpec,transform,transformOpts)}return fluid.isArrayable(rule)&&(transform.collectedFlatSchemaOpts=transform.collectedFlatSchemaOpts||{},transform.collectedFlatSchemaOpts[transform.outputPrefix]="array"),fluid.each(rule,function(value,key){if("transform"!==key){transform.outputPrefixOp.push(key);var togo=transform.expand(value,transform);void 0!==togo&&(fluid.model.transform.setValue(null,togo,transform),togo=void 0),transform.outputPrefixOp.pop()}}),togo},fluid.model.transform.makeStrategy=function(transform,handleFn,transformFn){transformFn=transformFn||fluid.model.transform.processRule,transform.expand=function(rules){return transformFn(rules,transform)},transform.outputPrefixOp=fluid.model.makePathStack(transform,"outputPrefix"),transform.inputPrefixOp=fluid.model.makePathStack(transform,"inputPrefix"),transform.transformHandler=handleFn},fluid.model.transform.invertConfiguration=function(rules){var transform={inverted:[]};return fluid.model.transform.makeStrategy(transform,fluid.model.transform.handleInvertStrategy),transform.expand(rules),{transform:transform.inverted}},fluid.model.transform.collectInputPaths=function(rules){var transform={inputPaths:[]};return fluid.model.transform.makeStrategy(transform,fluid.model.transform.handleCollectStrategy),transform.expand(rules),transform.inputPaths},fluid.model.transform.flatSchemaStrategy=function(flatSchema,getConfig){var keys=fluid.model.sortByKeyLength(flatSchema);return function(root,segment,index,segs){for(var path=getConfig.parser.compose.apply(null,segs.slice(0,index)),i=0;i<keys.length;++i){var key=keys[i];if(null!==fluid.pathUtil.matchPath(key,path,!0))return flatSchema[key]}}},fluid.model.transform.defaultSchemaValue=function(schemaValue){var type=fluid.isPrimitive(schemaValue)?schemaValue:schemaValue.type;return"array"===type?[]:{}},fluid.model.transform.isomorphicSchemaStrategy=function(source,getConfig){return function(root,segment,index,segs){var existing=fluid.get(source,segs.slice(0,index),getConfig);return fluid.isArrayable(existing)?"array":"object"}},fluid.model.transform.decodeStrategy=function(source,options,getConfig){return options.isomorphic?fluid.model.transform.isomorphicSchemaStrategy(source,getConfig):options.flatSchema?fluid.model.transform.flatSchemaStrategy(options.flatSchema,getConfig):void 0},fluid.model.transform.schemaToCreatorStrategy=function(strategy){return function(root,segment,index,segs){if(void 0===root[segment]){var schemaValue=strategy(root,segment,index,segs);return root[segment]=fluid.model.transform.defaultSchemaValue(schemaValue),root[segment]}}},fluid.model.transform.sequence=function(source,rules,options){for(var i=0;i<rules.length;++i)source=fluid.model.transform(source,rules[i],options);return source},fluid.model.compareByPathLength=function(changea,changeb){var pdiff=changea.path.length-changeb.path.length;return 0===pdiff?changea.sequence-changeb.sequence:pdiff},fluid.model.fireSortedChanges=function(changes,applier){changes.sort(fluid.model.compareByPathLength),fluid.requestChanges(applier,changes)},fluid.model.transformWithRules=function(source,rules,options){options=options||{};var getConfig=fluid.model.escapedGetConfig,schemaStrategy=fluid.model.transform.decodeStrategy(source,options,getConfig),transform={source:source,target:schemaStrategy?fluid.model.transform.defaultSchemaValue(schemaStrategy(null,"",0,[""])):{},resolverGetConfig:getConfig,collectedFlatSchemaOpts:void 0,queuedChanges:[],queuedTransforms:[]};fluid.model.transform.makeStrategy(transform,fluid.model.transform.handleTransformStrategy),transform.applier={fireChangeRequest:function(changeRequest){changeRequest.sequence=transform.queuedChanges.length,transform.queuedChanges.push(changeRequest)}},fluid.bindRequestChange(transform.applier),transform.expand(rules);var setConfig=fluid.copy(fluid.model.escapedSetConfig);return void 0!==transform.collectedFlatSchemaOpts&&($.extend(transform.collectedFlatSchemaOpts,options.flatSchema),schemaStrategy=fluid.model.transform.flatSchemaStrategy(transform.collectedFlatSchemaOpts,getConfig)),setConfig.strategies=[fluid.model.defaultFetchStrategy,schemaStrategy?fluid.model.transform.schemaToCreatorStrategy(schemaStrategy):fluid.model.defaultCreatorStrategy],transform.finalApplier=options.finalApplier||fluid.makeChangeApplier(transform.target,{resolverSetConfig:setConfig}),transform.queuedTransforms.length>0&&(transform.typeStack=[],transform.pathOp=fluid.model.makePathStack(transform,"path"),fluid.model.transform.expandWildcards(transform,source)),fluid.model.fireSortedChanges(transform.queuedChanges,transform.finalApplier),transform.target},$.extend(fluid.model.transformWithRules,fluid.model.transform),fluid.model.transform=fluid.model.transformWithRules,fluid.transformOne=function(rules){return{transformOptions:{transformer:"fluid.model.transformWithRules",config:rules}}},fluid.transformMany=function(rules){return{transformOptions:{transformer:"fluid.model.transform.sequence",config:rules}}}}(jQuery,fluid_1_5);