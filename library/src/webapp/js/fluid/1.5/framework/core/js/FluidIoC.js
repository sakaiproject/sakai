var fluid_1_5=fluid_1_5||{};!function($,fluid){"use strict";function searchDemands(demandingName,contextNames){var exist=dependentStore[demandingName]||[];outer:for(var i=0;i<exist.length;++i){for(var rec=exist[i],j=0;j<contextNames.length;++j)if(rec.contexts[j]!==contextNames[j])continue outer;return rec.spec}}function regenerateCursor(source,segs,limit,sourceStrategy){for(var i=0;limit>i;++i)source=sourceStrategy(source,segs[i],i,fluid.makeArray(segs));return source}fluid.visitComponentChildren=function(that,visitor,options,path,i){var instantiator=fluid.getInstantiator(that);for(var name in that){var newPath=instantiator.composePath(path,name),component=that[name];if(!(!fluid.isComponent(component)||options.visited&&options.visited[component.id])){if(options.visited&&(options.visited[component.id]=!0),visitor(component,name,newPath,path,i))return!0;options.flat||fluid.visitComponentChildren(component,visitor,options,newPath)}}},fluid.getMemberNames=function(instantiator,thatStack){var path=instantiator.idToPath(thatStack[thatStack.length-1].id),segs=fluid.model.parseEL(path);return segs.unshift.apply(segs,fluid.generate(thatStack.length-segs.length,"")),segs};var visitComponents=function(instantiator,thatStack,visitor,options){options=options||{visited:{},flat:!0,instantiator:instantiator};for(var memberNames=fluid.getMemberNames(instantiator,thatStack),i=thatStack.length-1;i>=0;--i){var path,that=thatStack[i];if(that.typeName&&(options.visited[that.id]=!0,path=instantiator.idToPath[that.id],visitor(that,memberNames[i],path,path,i)))return;if(fluid.visitComponentChildren(that,visitor,options,path,i))return}};fluid.mountStrategy=function(prefix,root,toMount){var offset=prefix.length;return function(target,name,i,segs){if(!(i<=prefix.length)){for(var j=0;j<prefix.length;++j)if(segs[j]!==prefix[j])return;return toMount(target,name,i-prefix.length,segs.slice(offset))}}},fluid.invokerFromRecord=function(invokerec,name,that){fluid.pushActivity("makeInvoker","beginning instantiation of invoker with name %name and record %record as child of %that",{name:name,record:invokerec,that:that});var invoker=fluid.makeInvoker(that,invokerec,name);return fluid.popActivity(),invoker},fluid.memberFromRecord=function(memberrec,name,that){var value=fluid.expandOptions(memberrec,that,null,null,{freeRoot:!0});return value},fluid.recordStrategy=function(that,options,optionsStrategy,recordPath,recordMaker,prefix){return prefix=prefix||[],{strategy:function(target,name,i){if(1===i){var record=fluid.driveStrategy(options,[recordPath,name],optionsStrategy);if(void 0!==record){fluid.set(target,[name],fluid.inEvaluationMarker);var member=recordMaker(record,name,that);return fluid.set(target,[name],member),member}}},initter:function(){var records=fluid.driveStrategy(options,recordPath,optionsStrategy)||{};for(var name in records)fluid.getForComponent(that,prefix.concat([name]))}}},fluid.instantiateFirers=function(that){var shadow=fluid.shadowForComponent(that),initter=fluid.get(shadow,["eventStrategyBlock","initter"])||fluid.identity;initter()},fluid.makeDistributionRecord=function(contextThat,sourceRecord,sourcePath,targetSegs,exclusions,offset,sourceType){offset=offset||0,sourceType=sourceType||"distribution";var source=fluid.copy(fluid.get(sourceRecord,sourcePath));fluid.each(exclusions,function(exclusion){fluid.model.applyChangeRequest(source,{path:exclusion,type:"DELETE"})});var record={options:{}},primitiveSource=fluid.isPrimitive(source);return fluid.model.applyChangeRequest(record,{path:targetSegs,type:primitiveSource?"ADD":"MERGE",value:source}),$.extend(record,{contextThat:contextThat,recordType:sourceType,priority:fluid.mergeRecordTypes.distribution+offset})},fluid.filterBlocks=function(contextThat,sourceBlocks,sourcePath,targetSegs,exclusions,removeSource){var togo=[],offset=0;return fluid.each(sourceBlocks,function(block){var source=fluid.get(block.source,sourcePath);if(source){togo.push(fluid.makeDistributionRecord(contextThat,block.source,sourcePath,targetSegs,exclusions,offset++,block.recordType));var rescued=$.extend({},source);removeSource&&fluid.model.applyChangeRequest(block.source,{path:sourcePath,type:"DELETE"}),fluid.each(exclusions,function(exclusion){var orig=fluid.get(rescued,exclusion);fluid.set(block.source,sourcePath.concat(exclusion),orig)})}}),togo},fluid.matchIoCSelector=function(selector,thatStack,contextHashes,memberNames,i){for(var thatpos=thatStack.length-1,selpos=selector.length-1;;){for(var mustMatchHere=thatpos===thatStack.length-1||selector[selpos].child,that=thatStack[thatpos],selel=selector[selpos],match=!0,j=0;j<selel.predList.length;++j){var pred=selel.predList[j];if(pred.context&&!contextHashes[thatpos][pred.context]&&memberNames[thatpos]!==pred.context){match=!1;break}if(pred.id&&that.id!==pred.id){match=!1;break}}if(0===selpos&&thatpos>i&&mustMatchHere&&(match=!1),match){if(0===selpos)return!0;--thatpos,--selpos}else{if(mustMatchHere)return!1;--thatpos}if(i>thatpos)return!1}},fluid.noteCollectedDistribution=function(parentShadow,memberName,distribution){fluid.model.setSimple(parentShadow,["collectedDistributions",memberName,distribution.id],!0)},fluid.isCollectedDistribution=function(parentShadow,memberName,distribution){return fluid.model.getSimple(parentShadow,["collectedDistributions",memberName,distribution.id])},fluid.clearCollectedDistributions=function(parentShadow,memberName){fluid.model.applyChangeRequest(parentShadow,{path:["collectedDistributions",memberName],type:"DELETE"})},fluid.collectDistributions=function(distributedBlocks,parentShadow,distribution,thatStack,contextHashes,memberNames,i){var lastMember=memberNames[memberNames.length-1];!fluid.isCollectedDistribution(parentShadow,lastMember,distribution)&&fluid.matchIoCSelector(distribution.selector,thatStack,contextHashes,memberNames,i)&&(distributedBlocks.push.apply(distributedBlocks,distribution.blocks),fluid.noteCollectedDistribution(parentShadow,lastMember,distribution))},fluid.registerCollectedClearer=function(shadow,parentShadow,memberName){!shadow.collectedClearer&&parentShadow&&(shadow.collectedClearer=function(){fluid.clearCollectedDistributions(parentShadow,memberName)})},fluid.receiveDistributions=function(parentThat,gradeNames,memberName,that){var instantiator=fluid.getInstantiator(parentThat||that),thatStack=instantiator.getThatStack(parentThat||that),memberNames=fluid.getMemberNames(instantiator,thatStack),distributedBlocks=[],shadows=fluid.transform(thatStack,function(thisThat){return instantiator.idToShadow[thisThat.id]}),parentShadow=shadows[shadows.length-(parentThat?1:2)],contextHashes=fluid.getMembers(shadows,"contextHash");parentThat?(memberNames.push(memberName),contextHashes.push(fluid.gradeNamesToHash(gradeNames)),thatStack.push(that)):fluid.registerCollectedClearer(shadows[shadows.length-1],parentShadow,memberNames[memberNames.length-1]);for(var i=0;i<thatStack.length-1;++i)fluid.each(shadows[i].distributions,function(distribution){fluid.collectDistributions(distributedBlocks,parentShadow,distribution,thatStack,contextHashes,memberNames,i)});return distributedBlocks},fluid.applyDistributions=function(that,preBlocks,targetShadow){var distributedBlocks=fluid.transform(preBlocks,function(preBlock){return fluid.generateExpandBlock(preBlock,that,targetShadow.mergePolicy)}),mergeOptions=targetShadow.mergeOptions;return mergeOptions.mergeBlocks.push.apply(mergeOptions.mergeBlocks,distributedBlocks),mergeOptions.updateBlocks(),distributedBlocks},fluid.parseExpectedOptionsPath=function(path,role){var segs=fluid.model.parseEL(path);return segs.length>1&&"options"!==segs[0]&&fluid.fail("Error in options distribution path ",path," - only "+role+' paths beginning with "options" are supported'),segs.slice(1)},fluid.isIoCSSSelector=function(context){return-1!==context.indexOf(" ")},fluid.pushDistributions=function(targetHead,selector,blocks){var targetShadow=fluid.shadowForComponent(targetHead),id=fluid.allocateGuid(),distributions=targetShadow.distributions=targetShadow.distributions||[];return distributions.push({id:id,selector:selector,blocks:blocks}),id},fluid.clearDistributions=function(targetHead,id){var targetShadow=fluid.shadowForComponent(targetHead);fluid.remove_if(targetShadow.distributions,function(distribution){return distribution.id===id})},fluid.extractSelectorHead=function(parsedSelector){var predList=parsedSelector[0].predList,context=predList[0].context;return predList.length=0,context},fluid.undistributableOptions=["gradeNames","distributeOptions","returnedPath","argumentMap","initFunction","mergePolicy","progressiveCheckerOptions"],fluid.distributeOptions=function(that,optionsStrategy){var records=fluid.makeArray(fluid.driveStrategy(that.options,"distributeOptions",optionsStrategy));fluid.each(records,function(record){var targetComp,selector,targetRef=fluid.parseContextReference(record.target);if(fluid.isIoCSSSelector(targetRef.context)){selector=fluid.parseSelector(targetRef.context,fluid.IoCSSMatcher);var headContext=fluid.extractSelectorHead(selector);"that"!==headContext&&fluid.fail('Downwards options distribution not supported from component other than "that"'),targetComp=that}else targetComp=fluid.resolveContext(targetRef.context,that),targetComp||fluid.fail("Error in options distribution record ",record," - could not resolve context selector {"+targetRef.context+"} to a root component");var preBlocks,targetSegs=fluid.model.parseEL(targetRef.path);if(void 0!==record.record)preBlocks=[fluid.makeDistributionRecord(that,record.record,[],targetSegs,[],0)];else{var thatShadow=fluid.shadowForComponent(that),source=fluid.parseContextReference(record.source||"{that}.options");"that"!==source.context&&fluid.fail("Error in options distribution record ",record," only a context of {that} is supported");var sourcePath=fluid.parseExpectedOptionsPath(source.path,"source"),fullExclusions=fluid.makeArray(record.exclusions).concat(0===sourcePath.length?fluid.undistributableOptions:[]),exclusions=fluid.transform(fullExclusions,function(exclusion){return fluid.model.parseEL(exclusion)});preBlocks=fluid.filterBlocks(that,thatShadow.mergeOptions.mergeBlocks,sourcePath,targetSegs,exclusions,record.removeSource),thatShadow.mergeOptions.updateBlocks()}if(selector)fluid.pushDistributions(targetComp,selector,preBlocks);else{var targetShadow=fluid.shadowForComponent(targetComp);fluid.applyDistributions(that,preBlocks,targetShadow)}})},fluid.gradeNamesToHash=function(gradeNames){var contextHash={};return fluid.each(gradeNames,function(gradeName){contextHash[gradeName]=!0,contextHash[fluid.computeNickName(gradeName)]=!0}),contextHash},fluid.cacheShadowGrades=function(that,shadow){var contextHash=fluid.gradeNamesToHash(that.options.gradeNames);contextHash[that.nickName]=!0,shadow.contextHash=contextHash},fluid.deliverOptionsStrategy=function(that,target,mergeOptions){var shadow=fluid.shadowForComponent(that,shadow);fluid.cacheShadowGrades(that,shadow),shadow.mergeOptions=mergeOptions},fluid.resolveReturnedPath=function(returnedPath,that){var shadow=fluid.shadowForComponent(that);return shadow&&""!==shadow.path?null:returnedPath},fluid.defaults("fluid.gradeLinkageRecord",{gradeNames:["fluid.littleComponent"]}),fluid.defaults("fluid.applyGradeLinkage",{}),fluid.gradeLinkageIndexer=function(defaults){return defaults.contextGrades&&defaults.resultGrades?["*"]:void 0},fluid.getLinkedGrades=function(gradeNames){var togo=[],gradeLinkages=fluid.indexDefaults("gradeLinkages",{gradeNames:"fluid.gradeLinkageRecord",indexFunc:fluid.gradeLinkageIndexer});return fluid.each(gradeLinkages["*"],function(defaultsName){var defaults=fluid.defaults(defaultsName),exclude=fluid.find(fluid.makeArray(defaults.contextGrades),function(grade){return fluid.contains(gradeNames,grade)?void 0:!0});exclude||togo.push.apply(togo,fluid.makeArray(defaults.resultGrades))}),togo},fluid.expandDynamicGrades=function(that,shadow,gradeNames,dynamicGrades){var resolved=[];fluid.each(dynamicGrades,function(dynamicGrade){var expanded=fluid.expandOptions(dynamicGrade,that);"function"==typeof expanded&&(expanded=expanded()),expanded&&(resolved=resolved.concat(expanded))});var allGrades=fluid.makeArray(gradeNames).concat(resolved);if(fluid.contains(allGrades,"fluid.applyGradeLinkage")){var linkedGrades=fluid.getLinkedGrades(allGrades);fluid.remove_if(linkedGrades,function(gradeName){return fluid.contains(allGrades,gradeName)}),resolved=resolved.concat(linkedGrades)}var distributedBlocks=fluid.receiveDistributions(null,null,null,that);if(distributedBlocks.length>0){var readyBlocks=fluid.applyDistributions(that,distributedBlocks,shadow),gradeNamesList=fluid.transform(fluid.getMembers(readyBlocks,["source","gradeNames"]),fluid.makeArray);resolved=resolved.concat.apply(resolved,gradeNamesList)}return resolved},fluid.collectDynamicGrades=function(that,shadow,defaultsBlock,gradeNames,dynamicGrades,resolved){var newDefaults=fluid.copy(fluid.getGradedDefaults(that.typeName,resolved));gradeNames.length=0,gradeNames.push.apply(gradeNames,newDefaults.gradeNames),fluid.cacheShadowGrades(that,shadow),shadow.mergeOptions.destroyValue("mergePolicy"),shadow.mergeOptions.destroyValue("components"),shadow.mergeOptions.destroyValue("invokers"),defaultsBlock.source=newDefaults,shadow.mergeOptions.updateBlocks();var furtherResolved=fluid.remove_if(gradeNames,function(gradeName){return"{"===gradeName.charAt(0)&&!fluid.contains(dynamicGrades,gradeName)},[]);return dynamicGrades.push.apply(dynamicGrades,furtherResolved),furtherResolved=fluid.expandDynamicGrades(that,shadow,gradeNames,furtherResolved),resolved.push.apply(resolved,furtherResolved),furtherResolved},fluid.computeDynamicGrades=function(that,shadow,strategy){delete that.options.gradeNames;var gradeNames=fluid.driveStrategy(that.options,"gradeNames",strategy),defaultsBlock=fluid.findMergeBlocks(shadow.mergeOptions.mergeBlocks,"defaults")[0],dynamicGrades=fluid.remove_if(gradeNames,function(gradeName){return"{"===gradeName.charAt(0)||!fluid.hasGrade(defaultsBlock.target,gradeName)},[]),resolved=fluid.expandDynamicGrades(that,shadow,gradeNames,dynamicGrades);if(0!==resolved.length){var furtherResolved;do furtherResolved=fluid.collectDynamicGrades(that,shadow,defaultsBlock,gradeNames,dynamicGrades,resolved);while(0!==furtherResolved.length)}shadow.collectedClearer&&(shadow.collectedClearer(),delete shadow.collectedClearer)},fluid.computeDynamicComponentKey=function(recordKey,sourceKey){return recordKey+(0===sourceKey?"":"-"+sourceKey)},fluid.registerDynamicRecord=function(that,recordKey,sourceKey,record,toCensor){var key=fluid.computeDynamicComponentKey(recordKey,sourceKey),cRecord=fluid.copy(record);return delete cRecord[toCensor],fluid.set(that.options,["components",key],cRecord),key},fluid.computeDynamicComponents=function(that,mergeOptions){var shadow=fluid.shadowForComponent(that),localSub=shadow.subcomponentLocal={},records=fluid.driveStrategy(that.options,"dynamicComponents",mergeOptions.strategy);fluid.each(records,function(record,recordKey){if(record.sources||record.createOnEvent||fluid.fail("Cannot process dynamicComponents record ",record,' without a "sources" or "createOnEvent" entry'),record.sources){var sources=fluid.expandOptions(record.sources,that);fluid.each(sources,function(source,sourceKey){var key=fluid.registerDynamicRecord(that,recordKey,sourceKey,record,"sources");localSub[key]={source:source,sourcePath:sourceKey}})}else if(record.createOnEvent){var event=fluid.event.expandOneEvent(that,record.createOnEvent);fluid.set(shadow,["dynamicComponentCount",recordKey],0);var listener=function(){var key=fluid.registerDynamicRecord(that,recordKey,shadow.dynamicComponentCount[recordKey]++,record,"createOnEvent");localSub[key]={arguments:fluid.makeArray(arguments)},fluid.initDependent(that,key)};event.addListener(listener),fluid.recordListener(event,listener,shadow)}})},fluid.computeComponentAccessor=function(that){var shadow=fluid.shadowForComponent(that),options=that.options,strategy=shadow.mergeOptions.strategy,optionsStrategy=fluid.mountStrategy(["options"],options,strategy);shadow.invokerStrategy=fluid.recordStrategy(that,options,strategy,"invokers",fluid.invokerFromRecord),shadow.eventStrategyBlock=fluid.recordStrategy(that,options,strategy,"events",fluid.eventFromRecord,["events"]);var eventStrategy=fluid.mountStrategy(["events"],that,shadow.eventStrategyBlock.strategy,["events"]);return shadow.memberStrategy=fluid.recordStrategy(that,options,strategy,"members",fluid.memberFromRecord),shadow.getConfig={strategies:[fluid.model.funcResolverStrategy,fluid.makeGingerStrategy(that),optionsStrategy,shadow.invokerStrategy.strategy,shadow.memberStrategy.strategy,eventStrategy]},fluid.computeDynamicGrades(that,shadow,strategy,shadow.mergeOptions.mergeBlocks),fluid.distributeOptions(that,strategy),shadow.getConfig},fluid.shadowForComponent=function(component){var instantiator=fluid.getInstantiator(component);return instantiator&&component?instantiator.idToShadow[component.id]:null},fluid.getForComponent=function(component,path){var shadow=fluid.shadowForComponent(component),getConfig=shadow?shadow.getConfig:void 0;return fluid.get(component,path,getConfig)},fluid.makeGingerStrategy=function(that){var instantiator=fluid.getInstantiator(that);return function(component,thisSeg,index,segs){var atval=component[thisSeg];if(atval===fluid.inEvaluationMarker&&index===segs.length&&fluid.fail('Error in component configuration - a circular reference was found during evaluation of path segment "'+thisSeg+'": for more details, see the activity records following this message in the console, or issue fluid.setLogging(fluid.logLevel.TRACE) when running your application'),index>1)return atval;if(void 0===atval&&component.hasOwnProperty(thisSeg))return fluid.NO_VALUE;if(void 0===atval){var parentPath=instantiator.idToShadow[component.id].path,childPath=fluid.composePath(parentPath,thisSeg);atval=instantiator.pathToComponent[childPath]}return void 0===atval&&fluid.getForComponent(component,["options","components",thisSeg])&&(fluid.initDependent(component,thisSeg),atval=component[thisSeg]),atval}},fluid.filterBuiltinGrades=function(gradeNames){return fluid.remove_if(fluid.makeArray(gradeNames),function(gradeName){return/^(autoInit|fluid.littleComponent|fluid.modelComponent|fluid.eventedComponent|fluid.viewComponent|fluid.typeFount)$/.test(gradeName)})},fluid.dumpGradeNames=function(that){return that.options&&that.options.gradeNames?" gradeNames: "+JSON.stringify(fluid.filterBuiltinGrades(that.options.gradeNames)):""},fluid.dumpThat=function(that){return'{ typeName: "'+that.typeName+'"'+fluid.dumpGradeNames(that)+" id: "+that.id+"}"},fluid.dumpThatStack=function(thatStack,instantiator){var togo=fluid.transform(thatStack,function(that){var path=instantiator.idToPath(that.id);return fluid.dumpThat(that)+(path?" - path: "+path:"")});return togo.join("\n")},fluid.resolveContext=function(context,that){var instantiator=fluid.getInstantiator(that);if("instantiator"===context)return instantiator;if("that"===context)return that;var foundComponent,thatStack=instantiator.getFullStack(that);return visitComponents(instantiator,thatStack,function(component,name){var shadow=fluid.shadowForComponent(component);return context===name||shadow&&shadow.contextHash&&shadow.contextHash[context]||context===component.typeName||context===component.nickName?(foundComponent=component,!0):fluid.getForComponent(component,["options","components",context,"type"])&&!component[context]?(foundComponent=fluid.getForComponent(component,context),!0):void 0}),foundComponent};var localRecordExpected=/^(arguments|options|container|source|sourcePath|change)$/;fluid.makeStackFetcher=function(parentThat,localRecord){var fetcher=function(parsed){parentThat&&parentThat.destroy===fluid.destroyedMarker&&fluid.fail("Cannot resolve reference ",parsed," from component "+fluid.dumpThat(parentThat)+" which has been destroyed");var context=parsed.context;if(localRecord&&localRecordExpected.test(context)){var fetched=fluid.get(localRecord[context],parsed.path);return"arguments"===context||"source"===context||"sourcePath"===context||"change"===context?fetched:{marker:"options"===context?fluid.EXPAND:fluid.EXPAND_NOW,value:fetched}}var foundComponent=fluid.resolveContext(context,parentThat);if(!foundComponent&&""!==parsed.path){var ref=fluid.renderContextReference(parsed);fluid.fail("Failed to resolve reference "+ref+" - could not match context with name "+context+" from component "+fluid.dumpThat(parentThat),parentThat)}return fluid.getForComponent(foundComponent,parsed.path)};return fetcher},fluid.makeStackResolverOptions=function(parentThat,localRecord){return $.extend(fluid.copy(fluid.rawDefaults("fluid.makeExpandOptions")),{fetcher:fluid.makeStackFetcher(parentThat,localRecord),contextThat:parentThat})},fluid.clearListeners=function(shadow){fluid.each(shadow.listeners,function(rec){rec.event.removeListener(rec.listener)}),delete shadow.listeners},fluid.recordListener=function(event,listener,shadow){if(event.ownerId!==shadow.that.id){var listeners=shadow.listeners;listeners||(listeners=shadow.listeners=[]),listeners.push({event:event,listener:listener})}};var idToInstantiator={};fluid.instantiator=function(freeInstantiator){function recordComponent(component,path,created){if(created){idToInstantiator[component.id]=that;var shadow=that.idToShadow[component.id]={};shadow.that=component,shadow.path=path}that.pathToComponent[path]&&fluid.fail("Error during instantiation - path "+path+" which has just created component "+fluid.dumpThat(component)+" has already been used for component "+fluid.dumpThat(that.pathToComponent[path])+" - this is a circular instantiation or other oversight. Please clear the component using instantiator.clearComponent() before reusing the path."),that.pathToComponent[path]=component}var that={id:fluid.allocateGuid(),free:freeInstantiator,nickName:"instantiator",pathToComponent:{},idToShadow:{},modelTransactions:{init:{}},composePath:fluid.composePath};return that.idToPath=function(id){var shadow=that.idToShadow[id];return shadow?shadow.path:""},that.getThatStack=function(component){var shadow=that.idToShadow[component.id];if(shadow){var path=shadow.path,parsed=fluid.model.parseEL(path),togo=fluid.transform(parsed,function(value,i){var parentPath=fluid.model.composeSegments.apply(null,parsed.slice(0,i+1));return that.pathToComponent[parentPath]}),root=that.pathToComponent[""];return root&&togo.unshift(root),togo}return[component]},that.getEnvironmentalStack=function(){var togo=[fluid.staticEnvironment];return freeInstantiator||togo.push(fluid.globalThreadLocal()),togo},that.getFullStack=function(component){var thatStack=component?that.getThatStack(component):[];return that.getEnvironmentalStack().concat(thatStack)},that.recordRoot=function(component){component&&component.id&&!that.pathToComponent[""]&&recordComponent(component,"",!0)},that.recordKnownComponent=function(parent,component,name,created){var parentPath=that.idToShadow[parent.id].path,path=that.composePath(parentPath,name);recordComponent(component,path,created)},that.clearComponent=function(component,name,child,options,noModTree,path){var record=that.idToShadow[component.id].path;options=options||{flat:!0,instantiator:that},child=child||component[name],path=path||record,void 0===path&&fluid.fail("Cannot clear component "+name+" from component ",component," which was not created by this instantiator"),fluid.fireEvent(child,"events.onClear",[child,name,component]);var childPath=that.composePath(path,name),childRecord=that.idToShadow[child.id];childRecord&&childRecord.path===childPath&&(fluid.doDestroy(child,name,component),fluid.clearListeners(childRecord),fluid.visitComponentChildren(child,function(gchild,gchildname,newPath,parentPath){that.clearComponent(child,gchildname,null,options,!0,parentPath)},options,childPath),fluid.fireEvent(child,"events.afterDestroy",[child,name,component]),delete that.idToShadow[child.id],delete idToInstantiator[child.id]),delete that.pathToComponent[childPath],noModTree||delete component[name]},that},fluid.freeInstantiator=fluid.instantiator(!0),fluid.getInstantiator=function(component){return component&&idToInstantiator[component.id]||fluid.freeInstantiator},fluid.expandOptions=function(args,that,mergePolicy,localRecord,outerExpandOptions){if(!args)return args;fluid.pushActivity("expandOptions","expanding options %args for component %that ",{that:that,args:args});var expandOptions=fluid.makeStackResolverOptions(that,localRecord);expandOptions.mergePolicy=mergePolicy,expandOptions.freeRoot=outerExpandOptions&&outerExpandOptions.freeRoot;var expanded=outerExpandOptions&&outerExpandOptions.defer?fluid.makeExpandOptions(args,expandOptions):fluid.expand(args,expandOptions);return fluid.popActivity(),expanded},fluid.localRecordExpected=["type","options","args","mergeOptions","createOnEvent","priority","recordType"],fluid.checkComponentRecord=function(defaults,localRecord){var expected=fluid.arrayToHash(fluid.localRecordExpected);fluid.each(defaults&&defaults.argumentMap,function(value,key){expected[key]=!0}),fluid.each(localRecord,function(value,key){expected[key]||fluid.fail('Probable error in subcomponent record - key "'+key+'" found, where the only legal options are '+fluid.keys(expected).join(", "))})},fluid.pushDemands=function(list,demands){function push(rec){rec.recordType="demands",rec.priority=thisp++,list.push(rec)}function buildAndPush(rec){push({options:rec})}demands=fluid.makeArray(demands);for(var thisp=fluid.mergeRecordTypes.demands,i=0;i<demands.length;++i){var thisd=demands[i];if(thisd.options)push(thisd);else if(thisd.mergeOptions){var mergeOptions=fluid.makeArray(thisd.mergeOptions);fluid.each(mergeOptions,buildAndPush)}else fluid.fail("Uninterpretable demands record without options or mergeOptions ",thisd)}},fluid.mergeRecordsToList=function(mergeRecords){var list=[];return fluid.each(mergeRecords,function(value,key){if(value.recordType=key,"distributions"===key)list.push.apply(list,value);else if("demands"!==key){if(!value.options)return;value.priority=fluid.mergeRecordTypes[key],void 0===value.priority&&fluid.fail("Merge record with unrecognised type "+key+": ",value),list.push(value)}else fluid.pushDemands(list,value)}),list};var addPolicyBuiltins=function(policy){return fluid.each(["gradeNames","mergePolicy","argumentMap","components","dynamicComponents","members","invokers","events","listeners","modelListeners","distributeOptions","transformOptions"],function(key){fluid.set(policy,[key,"*","noexpand"],!0)}),policy};fluid.generateExpandBlock=function(record,that,mergePolicy,localRecord){var expanded=fluid.expandOptions(record.options,record.contextThat||that,mergePolicy,localRecord,{defer:!0});return expanded.priority=record.priority,expanded.recordType=record.recordType,expanded};var expandComponentOptionsImpl=function(mergePolicy,defaults,userOptions,that){var defaultCopy=fluid.copy(defaults);addPolicyBuiltins(mergePolicy);var shadow=fluid.shadowForComponent(that);shadow.mergePolicy=mergePolicy;var mergeRecords={defaults:{options:defaultCopy}};userOptions&&(userOptions.marker===fluid.EXPAND?($.extend(mergeRecords,userOptions.mergeRecords),mergeRecords.subcomponentRecord&&fluid.checkComponentRecord(defaults,mergeRecords.subcomponentRecord)):mergeRecords.user={options:fluid.expandCompact(userOptions,!0)});var expandList=fluid.mergeRecordsToList(mergeRecords),togo=fluid.transform(expandList,function(value){return fluid.generateExpandBlock(value,that,mergePolicy,userOptions&&userOptions.localRecord)});return togo};fluid.makeIoCRootDestroy=function(instantiator,that){return function(){instantiator.clearComponent(that,"",that,null,!0),fluid.doDestroy(that),fluid.fireEvent(that,"events.afterDestroy",[that,"",null])}},fluid.expandComponentOptions=function(mergePolicy,defaults,userOptions,that){var fresh,instantiator=userOptions&&userOptions.marker===fluid.EXPAND&&void 0!==userOptions.memberName?userOptions.instantiator:null;instantiator||(instantiator=fluid.instantiator(),fresh=!0,fluid.log("Created new instantiator with id "+instantiator.id+" in order to operate on component "+(that?that.typeName:"[none]")),that.destroy=fluid.makeIoCRootDestroy(instantiator,that)),fluid.pushActivity("expandComponentOptions","expanding component options %options with record %record for component %that",{options:userOptions&&userOptions.mergeRecords,record:userOptions,that:that}),fresh?instantiator.recordRoot(that):instantiator.recordKnownComponent(userOptions.parentThat,that,userOptions.memberName,!0);var togo=expandComponentOptionsImpl(mergePolicy,defaults,userOptions,that);return fluid.popActivity(),togo},fluid.argMapToDemands=function(argMap){var togo=[];return fluid.each(argMap,function(value,key){togo[value]="{"+key+"}"}),togo},fluid.makePassArgsSpec=function(initArgs){return fluid.transform(initArgs,function(arg,index){return"{arguments}."+index})},fluid.pushDemandSpec=function(record,options,mergeOptions){options&&"{options}"!==options&&record.push({options:options}),mergeOptions&&record.push({mergeOptions:mergeOptions})},fluid.embodyDemands=function(parentThat,demandspec,initArgs,options){options=options||{},demandspec.mergeOptions&&demandspec.options&&fluid.fail("demandspec ",demandspec," is invalid - cannot specify literal options together with mergeOptions"),demandspec.transformOptions&&(demandspec.options=$.extend(!0,{},demandspec.options,{transformOptions:demandspec.transformOptions}));var demands=fluid.makeArray(demandspec.args),upDefaults=fluid.defaults(demandspec.funcName),fakeThat={},distributions=upDefaults&&parentThat?fluid.receiveDistributions(parentThat,upDefaults.gradeNames,options.memberName,fakeThat):[],argMap=upDefaults?upDefaults.argumentMap:null,inferMap=!1;if(upDefaults&&(options.passArgs=!1),!argMap&&(upDefaults||options&&options.componentRecord))if(inferMap=!0,demands.length<2)argMap=fluid.rawDefaults("fluid.littleComponent").argumentMap;else{var optionpos=$.inArray("{options}",demands);-1===optionpos&&(optionpos=demands.length-1),argMap={options:optionpos}}options=options||{},0===demands.length&&(argMap?demands=fluid.argMapToDemands(argMap):options.passArgs&&(demands=fluid.makePassArgsSpec(initArgs)));var shadow=fluid.shadowForComponent(parentThat),localDynamic=shadow&&options.memberName?shadow.subcomponentLocal[options.memberName]:null,localRecord=$.extend({arguments:initArgs},fluid.censorKeys(options.componentRecord,["type"]),localDynamic);fluid.each(argMap,function(index,name){if(initArgs.length>0&&(localRecord[name]=localRecord.arguments[index]),void 0!==demandspec[name]&&void 0===localRecord[name]&&(localRecord[name]=demandspec[name]),"options"!==name)for(var i=0;i<distributions.length;++i)void 0!==distributions[i][name]&&(localRecord[name]=distributions[i][name])});var i;for(i=0;i<distributions.length;++i)void 0!==distributions[i].type&&(demandspec.funcName=distributions[i].type);var mergeRecords={distributions:distributions};void 0!==options.componentRecord&&(mergeRecords.subcomponentRecord=$.extend({},options.componentRecord));var expandOptions=fluid.makeStackResolverOptions(parentThat,localRecord),pushBackSpec=function(backSpec){fluid.pushDemandSpec(mergeRecords.demands,backSpec.options,backSpec.mergeOptions)},args=[];if(demands)for(i=0;i<demands.length;++i){var arg=demands[i];if(fluid.isMarker(arg)&&arg.value===fluid.COMPONENT_OPTIONS.value&&(arg="{options}",inferMap&&(argMap={options:i})),"string"==typeof arg&&"@"===arg.charAt(0)){var argpos=arg.substring(1);arg="{arguments}."+argpos}demands[i]=arg,argMap&&argMap.options===i?(options.passArgs&&fluid.fail("Error invoking function "+demandspec.funcName+": found component creator rather than free function"),"object"!=typeof arg||arg.targetTypeName||(arg.targetTypeName=demandspec.funcName),mergeRecords.demands=[],fluid.each(demandspec.backSpecs.reverse(),pushBackSpec),fluid.pushDemandSpec(mergeRecords.demands,demandspec.options||arg,demandspec.mergeOptions),initArgs.length>0&&(mergeRecords.user={
options:localRecord.options}),args[i]={marker:fluid.EXPAND,localRecord:localDynamic,mergeRecords:mergeRecords,instantiator:fluid.getInstantiator(parentThat),parentThat:parentThat,memberName:options.memberName}):args[i]=fluid.expand(arg,expandOptions),args[i]&&fluid.isMarker(args[i].marker,fluid.EXPAND_NOW)&&(args[i]=fluid.expand(args[i].value,expandOptions))}else args=initArgs?initArgs:[];var togo={args:args,preExpand:demands,funcName:demandspec.funcName};return togo},fluid.fabricateDestroyMethod=function(that,name,instantiator,child){return function(){instantiator.clearComponent(that,name,child)}},fluid.initDependent=function(that,name,directArgs){if(!that[name]){directArgs=directArgs||[];var component=that.options.components[name];fluid.pushActivity("initDependent",'instantiating dependent component with name "%name" with record %record as child of %parent',{name:name,record:component,parent:that});var instance,instantiator=idToInstantiator[that.id];if("string"==typeof component)instance=fluid.expandOptions(component,that),instantiator.recordKnownComponent(that,instance,name,!1);else if(component.type){var type=fluid.expandOptions(component.type,that);type||fluid.fail("Error in subcomponent record: ",component.type," could not be resolved to a type for component ",name," of parent ",that);var invokeSpec=fluid.resolveDemands(that,[type,name],directArgs,{componentRecord:component,memberName:name});instance=fluid.initSubcomponentImpl(that,{type:invokeSpec.funcName},invokeSpec.args);var path=instantiator.composePath(instantiator.idToPath(that.id),name),existing=instantiator.pathToComponent[path];existing&&existing!==instance&&instantiator.clearComponent(that,name,existing),instance&&instance.typeName&&instance.id&&instance!==existing&&instantiator.recordKnownComponent(that,instance,name,!0),instance.destroy=fluid.fabricateDestroyMethod(that,name,instantiator,instance)}else fluid.fail("Unrecognised material in place of subcomponent "+name+' - no "type" field found');return that[name]=instance,fluid.fireEvent(instance,"events.onAttach",[instance,name,that]),fluid.popActivity(),instance}},fluid.bindDeferredComponent=function(that,componentName,component){var events=fluid.makeArray(component.createOnEvent);fluid.each(events,function(eventName){var event="{"===eventName.charAt(0)?fluid.expandOptions(eventName,that):that.events[eventName];event.addListener(function(){if(fluid.pushActivity("initDeferred","instantiating deferred component %componentName of parent %that due to event %eventName",{componentName:componentName,that:that,eventName:eventName}),that[componentName]){var instantiator=idToInstantiator[that.id];instantiator.clearComponent(that,componentName)}fluid.initDependent(that,componentName),fluid.popActivity()},null,null,component.priority)})},fluid.priorityForComponent=function(component){return component.priority?component.priority:"fluid.typeFount"===component.type||fluid.hasGrade(fluid.defaults(component.type),"fluid.typeFount")?"first":void 0},fluid.initDependents=function(that){fluid.pushActivity("initDependents","instantiating dependent components for component %that",{that:that});var shadow=fluid.shadowForComponent(that);shadow.memberStrategy.initter();var options=that.options,components=options.components||{},componentSort={};fluid.each(components,function(component,name){if(component.createOnEvent)fluid.bindDeferredComponent(that,name,component);else{var priority=fluid.priorityForComponent(component);componentSort[name]={key:name,priority:fluid.event.mapPriority(priority,0)}}});var componentList=fluid.event.sortListeners(componentSort);fluid.each(componentList,function(entry){fluid.initDependent(that,entry.key)}),shadow.invokerStrategy.initter(),fluid.popActivity()};var dependentStore={},isDemandLogging=!1;fluid.setDemandLogging=function(set){isDemandLogging=set},fluid.isDemandLogging=function(){return isDemandLogging&&fluid.isLogging()},fluid.demands=function(demandingName,contextName,spec){var contextNames=fluid.makeArray(contextName).sort();if(!spec)return searchDemands(demandingName,contextNames);if(spec.length&&(spec={args:spec}),fluid.getCallerInfo&&fluid.isDemandLogging()){var callerInfo=fluid.getCallerInfo(5);callerInfo&&(spec.registeredFrom=callerInfo)}spec.demandId=fluid.allocateGuid();var exist=dependentStore[demandingName];exist||(exist=[],dependentStore[demandingName]=exist),exist.push({contexts:contextNames,spec:spec})},fluid.compareDemands=function(speca,specb){return specb.intersect-speca.intersect},fluid.locateAllDemands=function(parentThat,demandingNames){var demandLogging=fluid.isDemandLogging(demandingNames);demandLogging&&fluid.log("Resolving demands for function names ",demandingNames," in context of "+(parentThat?"component "+parentThat.typeName:"no component"));var contextNames={},visited=[],instantiator=fluid.getInstantiator(parentThat),thatStack=instantiator.getFullStack(parentThat);visitComponents(instantiator,thatStack,function(component,xname,path,xpath,depth){contextNames[component.typeName]=depth;var gradeNames=fluid.makeArray(fluid.get(component,["options","gradeNames"]));fluid.each(gradeNames,function(gradeName){contextNames[gradeName]=depth}),visited.push(component)}),demandLogging&&fluid.log("Components in scope for resolution:\n"+fluid.dumpThatStack(visited,instantiator));for(var matches=[],i=0;i<demandingNames.length;++i)for(var rec=dependentStore[demandingNames[i]]||[],j=0;j<rec.length;++j){for(var spec=rec[j],horizonLevel=spec.spec.horizon?contextNames[spec.spec.horizon]:-1,record={spec:spec,intersect:0,uncess:0},k=0;k<spec.contexts.length;++k){var depth=contextNames[spec.contexts[k]];record[void 0!==depth&&depth>=horizonLevel?"intersect":"uncess"]+=2}0===spec.contexts.length&&record.intersect++,0===record.uncess&&matches.push(record)}return matches.sort(fluid.compareDemands),matches},fluid.locateDemands=function(parentThat,demandingNames){var matches=fluid.locateAllDemands(parentThat,demandingNames),demandspec=fluid.getMembers(matches,["spec","spec"]);return fluid.isDemandLogging(demandingNames)&&(demandspec.length?fluid.log("Located "+matches.length+" potential match"+(1===matches.length?"":"es")+", selected best match with "+matches[0].intersect+" matched context names: ",demandspec):fluid.log("No matches found for demands, using direct implementation")),demandspec},fluid.determineDemands=function(parentThat,funcNames){funcNames=fluid.makeArray(funcNames);var newFuncName=funcNames[0],demandspec=fluid.locateDemands(parentThat,funcNames);return demandspec.length&&demandspec[0].funcName&&(newFuncName=demandspec[0].funcName),$.extend(!0,{funcName:newFuncName,args:demandspec[0]?fluid.makeArray(demandspec[0].args):[]},{backSpecs:demandspec.slice(1)},fluid.censorKeys(demandspec[0],["funcName","args"]))},fluid.resolveDemands=function(parentThat,funcNames,initArgs,options){var demandspec=fluid.determineDemands(parentThat,funcNames);return fluid.embodyDemands(parentThat,demandspec,initArgs,options)},fluid.thisistToApplicable=function(record,recthis,that){return{apply:function(noThis,args){var resolvedThis=fluid.expandOptions(recthis,that);"string"==typeof resolvedThis&&(resolvedThis=fluid.getGlobalValue(resolvedThis)),resolvedThis||fluid.fail("Could not resolve reference "+recthis+" to a value");var resolvedFunc=resolvedThis[record.method];return"function"!=typeof resolvedFunc&&fluid.fail("Object ",resolvedThis," at reference "+recthis+" has no member named "+record.method+" which is a function "),fluid.log("Applying arguments ",args," to method "+record.method+" of instance ",resolvedThis),resolvedFunc.apply(resolvedThis,args)}}},fluid.changeToApplicable=function(record,that){return{apply:function(noThis,args){var parsed=fluid.parseValidModelReference(that,"changePath listener record",record.changePath),value=fluid.expandOptions(record.value,that,{},{arguments:args});fluid.fireSourcedChange(parsed.applier,parsed.path,value,record.source)}}},fluid.recordToApplicable=function(record,that){if(record.changePath)return fluid.changeToApplicable(record,that);var recthis=record["this"];return record.method^recthis&&fluid.fail("Record ",that,' must contain both entries "method" and "this" if it contains either'),record.method?fluid.thisistToApplicable(record,recthis,that):null},fluid.invoke=function(functionName,args,that,environment){fluid.pushActivity("invokeFunc",'invoking function with name "%functionName" from component %that',{functionName:functionName,that:that});var invokeSpec=fluid.resolveDemands(that,functionName,fluid.makeArray(args),{passArgs:!0}),togo=fluid.invokeGlobalFunction(invokeSpec.funcName,invokeSpec.args,environment);return fluid.popActivity(),togo},fluid.makeFreeInvoker=function(functionName,environment){var demandSpec=fluid.determineDemands(null,functionName);return function(){var invokeSpec=fluid.embodyDemands(null,demandSpec,fluid.makeArray(arguments),{passArgs:!0});return fluid.invokeGlobalFunction(invokeSpec.funcName,invokeSpec.args,environment)}};var argPrefix="{arguments}.";fluid.parseInteger=function(string){return isFinite(string)&&string%1===0?Number(string):NaN},fluid.makeFastInvoker=function(invokeSpec,func){var argMap;if(invokeSpec.preExpand){argMap={};for(var i=0;i<invokeSpec.preExpand.length;++i){var value=invokeSpec.preExpand[i];if("string"==typeof value){if(-1!==value.indexOf("}.model"))return{noFast:!0};if("{arguments}"===value)argMap[i]="*";else if(0===value.indexOf(argPrefix)){var argIndex=fluid.parseInteger(value.substring(argPrefix.length));if(isNaN(argIndex))return{noFast:!0};argMap[i]=argIndex}}}}var outArgs=invokeSpec.args,invoke=argMap?function(args){for(var i in argMap)outArgs[i]="*"===argMap[i]?args:args[argMap[i]];return func.apply(null,outArgs)}:function(args){return func.apply(null,args)};return{invoke:invoke}},fluid.makeInvoker=function(that,invokerec,name,environment){var functionName;"string"==typeof invokerec&&("{"===invokerec.charAt(0)?invokerec={func:invokerec}:functionName=invokerec);var demandspec=functionName?fluid.determineDemands(that,functionName):invokerec,fastRec={noFast:invokerec.dynamic};return function(){fluid.defeatLogging===!1&&fluid.pushActivity("invokeInvoker","invoking invoker with name %name and record %record from component %that",{name:name,record:invokerec,that:that});var togo;if(fastRec.invoke)togo=fastRec.invoke(arguments);else{var func=fluid.recordToApplicable(invokerec,that),args=fluid.makeArray(arguments),invokeSpec=fluid.embodyDemands(that,demandspec,args,{passArgs:!0});func=func||(invokeSpec.funcName?fluid.getGlobalValue(invokeSpec.funcName,environment):fluid.expandOptions(demandspec.func,that)),func&&func.apply||fluid.fail("Error in invoker record: could not resolve members func, funcName or method to a function implementation - got "+func+" from ",demandspec),fastRec.noFast!==!0&&(fastRec=fluid.makeFastInvoker(invokeSpec,func)),togo=func.apply(null,invokeSpec.args)}return fluid.defeatLogging===!1&&fluid.popActivity(),togo}},fluid.event.makeTrackedListenerAdder=function(source){var shadow=fluid.shadowForComponent(source);return function(event){return{addListener:function(listener){fluid.recordListener(event,listener,shadow),event.addListener.apply(null,arguments)}}}},fluid.event.listenerEngine=function(eventSpec,callback,adder){function checkFire(){var notall=fluid.find(eventSpec,function(value,key){return void 0===argstruc[key]?!0:void 0});if(!notall){var oldstruc=argstruc;argstruc={},callback(oldstruc)}}var argstruc={};fluid.each(eventSpec,function(event,eventName){adder(event).addListener(function(){argstruc[eventName]=fluid.makeArray(arguments),checkFire()})})},fluid.event.dispatchListener=function(that,listener,eventName,eventSpec,indirectArgs){var togo=function(){fluid.pushActivity("dispatchListener","firing to listener to event named %eventName of component %that",{eventName:eventName,that:that});var args=indirectArgs?arguments[0]:fluid.makeArray(arguments),demandspec=fluid.determineDemands(that,eventName);0===demandspec.args.length&&eventSpec.args&&(demandspec.args=eventSpec.args);var resolved=fluid.embodyDemands(that,demandspec,args,{passArgs:!0}),togo=fluid.event.invokeListener(listener,resolved.args);return fluid.popActivity(),togo};return fluid.event.impersonateListener(listener,togo),togo},fluid.event.resolveSoftNamespace=function(key){if("string"!=typeof key)return null;var lastpos=Math.max(key.lastIndexOf("."),key.lastIndexOf("}"));return key.substring(lastpos+1)},fluid.event.resolveListenerRecord=function(lisrec,that,eventName,namespace,standard){var badRec=function(record,extra){fluid.fail("Error in listener record - could not resolve reference ",record,' to a listener or firer. Did you miss out "events." when referring to an event firer?'+extra)};fluid.pushActivity("resolveListenerRecord","resolving listener record for event named %eventName for component %that",{eventName:eventName,that:that});var records=fluid.makeArray(lisrec),transRecs=fluid.transform(records,function(record){var expanded=fluid.isPrimitive(record)||record.expander?{listener:record}:fluid.copy(record),methodist=fluid.recordToApplicable(record,that);methodist?expanded.listener=methodist:expanded.listener=expanded.listener||expanded.func||expanded.funcName,expanded.listener||badRec(record,' Listener record must contain a member named "listener", "func", "funcName" or "method"');var softNamespace=record.method?fluid.event.resolveSoftNamespace(record["this"])+"."+record.method:fluid.event.resolveSoftNamespace(expanded.listener);expanded.namespace||namespace||!softNamespace||(expanded.softNamespace=!0,expanded.namespace=(record.componentSource?record.componentSource:that.typeName)+"."+softNamespace);var listener=expanded.listener=fluid.expandOptions(expanded.listener,that);listener||badRec(record,"");var firer=!1;return"fluid.event.firer"===listener.typeName&&(listener=listener.fire,firer=!0),expanded.listener=standard&&(expanded.args||firer)?fluid.event.dispatchListener(that,listener,eventName,expanded):listener,expanded}),togo={records:transRecs,adderWrapper:standard?fluid.event.makeTrackedListenerAdder(that):null};return fluid.popActivity(),togo},fluid.event.expandOneEvent=function(that,event){var origin;return origin="string"==typeof event&&"{"!==event.charAt(0)?fluid.getForComponent(that,["events",event]):fluid.expandOptions(event,that),origin&&"fluid.event.firer"===origin.typeName||fluid.fail("Error in event specification - could not resolve base event reference ",event," to an event firer: got ",origin),origin},fluid.event.expandEvents=function(that,event){return"string"==typeof event?fluid.event.expandOneEvent(that,event):fluid.transform(event,function(oneEvent){return fluid.event.expandOneEvent(that,oneEvent)})},fluid.event.resolveEvent=function(that,eventName,eventSpec){fluid.pushActivity("resolveEvent","resolving event with name %eventName attached to component %that",{eventName:eventName,that:that});var adder=fluid.event.makeTrackedListenerAdder(that);"string"==typeof eventSpec&&(eventSpec={event:eventSpec});var event=eventSpec.event||eventSpec.events;event||fluid.fail("Event specification for event with name "+eventName+" does not include a base event specification: ",eventSpec);var firer,origin=fluid.event.expandEvents(that,event),isMultiple="fluid.event.firer"!==origin.typeName,isComposite=eventSpec.args||isMultiple;if(isComposite){firer=fluid.makeEventFirer(null,null," [composite] "+fluid.event.nameEvent(that,eventName));var dispatcher=fluid.event.dispatchListener(that,firer.fire,eventName,eventSpec,isMultiple);isMultiple?fluid.event.listenerEngine(origin,dispatcher,adder):adder(origin).addListener(dispatcher)}else firer={typeName:"fluid.event.firer"},firer.fire=function(){var outerArgs=fluid.makeArray(arguments);fluid.pushActivity("fireSynthetic","firing synthetic event %eventName ",{eventName:eventName});var togo=origin.fire.apply(null,outerArgs);return fluid.popActivity(),togo},firer.addListener=function(listener,namespace,predicate,priority,softNamespace){var dispatcher=fluid.event.dispatchListener(that,listener,eventName,eventSpec);adder(origin).addListener(dispatcher,namespace,predicate,priority,softNamespace)},firer.removeListener=function(listener){origin.removeListener(listener)};return fluid.popActivity(),firer},fluid.withEnvironment=function(envAdd,func,root){return root=root||fluid.globalThreadLocal(),fluid.tryCatch(function(){for(var key in envAdd)root[key]=envAdd[key];return $.extend(root,envAdd),func()},null,function(){for(var key in envAdd)delete root[key]})},fluid.fetchContextReference=function(parsed,directModel,env,elResolver,externalFetcher){elResolver&&(parsed=elResolver(parsed,env));var base=parsed.context?env[parsed.context]:directModel;if(!base){var resolveExternal=externalFetcher&&externalFetcher(parsed);return resolveExternal||base}return parsed.noDereference?parsed.path:fluid.get(base,parsed.path)},fluid.makeEnvironmentFetcher=function(directModel,elResolver,envGetter,externalFetcher){return envGetter=envGetter||fluid.globalThreadLocal,function(parsed){var env=envGetter();return fluid.fetchContextReference(parsed,directModel,env,elResolver,externalFetcher)}},fluid.coerceToPrimitive=function(string){return"false"===string?!1:"true"===string?!0:isFinite(string)?Number(string):string},fluid.compactStringToRec=function(string,type){var openPos=string.indexOf("("),closePos=string.indexOf(")");if((-1===openPos^-1===closePos||openPos>closePos)&&fluid.fail("Badly-formed compact "+type+" record without matching parentheses: ",string),-1!==openPos&&-1!==closePos){var prefix=string.substring(0,openPos),body=string.substring(openPos+1,closePos),args=fluid.transform(body.split(","),$.trim,fluid.coerceToPrimitive),togo={args:args};return"invoker"===type&&"!"===prefix.charAt(openPos-1)&&(prefix=string.substring(0,openPos-1),togo.dynamic=!0),togo["{"===prefix.charAt(0)?"func":"funcName"]=prefix,togo}return"expander"===type&&fluid.fail("Badly-formed compact expander record without parentheses: ",string),string},fluid.expandPrefix="@expand:",fluid.expandCompactString=function(string,active){var rec=string;if(0===string.indexOf(fluid.expandPrefix)){var rem=string.substring(fluid.expandPrefix.length);rec={expander:fluid.compactStringToRec(rem,"expander")}}else active&&(rec=fluid.compactStringToRec(string,active));return rec};var singularPenRecord={listeners:"listener",modelListeners:"modelListener"},singularRecord=$.extend({invokers:"invoker"},singularPenRecord);fluid.expandCompactRec=function(segs,target,source,userOptions){var pen=segs.length>0?segs[segs.length-1]:"",active=singularRecord[pen];!active&&segs.length>1&&(active=singularPenRecord[segs[segs.length-2]]),fluid.each(source,function(value,key){return!fluid.isPlainObject(value)||fluid.isDOMish(value)||userOptions&&"model"===key&&0===segs.length?("string"==typeof value&&(value=fluid.expandCompactString(value,active)),void(target[key]=value)):(target[key]=fluid.freshContainer(value),segs.push(key),fluid.expandCompactRec(segs,target[key],value),void segs.pop())})},fluid.expandCompact=function(options,userOptions){var togo={};return fluid.expandCompactRec([],togo,options,userOptions),togo},fluid.extractEL=function(string,options){if("ALL"===options.ELstyle)return string;if(1===options.ELstyle.length){if(string.charAt(0)===options.ELstyle)return string.substring(1)}else if("${}"===options.ELstyle){var i1=string.indexOf("${"),i2=string.lastIndexOf("}");if(0===i1&&-1!==i2)return string.substring(2,i2)}},fluid.extractELWithContext=function(string,options){var EL=fluid.extractEL(string,options);return EL&&"{"===EL.charAt(0)&&EL.indexOf("}")>0?fluid.parseContextReference(EL):EL?{path:EL}:EL},fluid.parseContextReference=function(reference,index,delimiter){index=index||0;var endcpos=reference.indexOf("}",index+1);-1===endcpos&&fluid.fail('Cannot parse context reference "'+reference+'": Malformed context reference without }');var context=reference.substring(index+1,endcpos),endpos=delimiter?reference.indexOf(delimiter,endcpos+1):reference.length,path=reference.substring(endcpos+1,endpos);return"."===path.charAt(0)&&(path=path.substring(1)),{context:context,path:path,endpos:endpos}},fluid.renderContextReference=function(parsed){return"{"+parsed.context+"}."+parsed.path},fluid.resolveContextValue=function(string,options){function fetch(parsed){fluid.pushActivity("resolveContextValue","resolving context value %string",{string:string});var togo=options.fetcher(parsed);return fluid.pushActivity("resolvedContextValue","resolved value %string to value %value",{string:string,value:togo}),fluid.popActivity(2),togo}var parsed;if(options.bareContextRefs&&"{"===string.charAt(0)&&string.indexOf("}")>0)return parsed=fluid.parseContextReference(string),fetch(parsed);if(options.ELstyle&&"${}"!==options.ELstyle&&(parsed=fluid.extractELWithContext(string,options)))return fetch(parsed);for(;"string"==typeof string;){var i1=string.indexOf("${"),i2=string.indexOf("}",i1+2);if(-1===i1||-1===i2)break;"{"===string.charAt(i1+2)?(parsed=fluid.parseContextReference(string,i1+2,"}"),i2=parsed.endpos):parsed={path:string.substring(i1+2,i2)};var subs=fetch(parsed),all=0===i1&&i2===string.length-1;if(void 0===subs||null===subs)return subs;string=all?subs:string.substring(0,i1)+subs+string.substring(i2+1)}return string},fluid.expandExpander=function(target,source,options){var expander=fluid.getGlobalValue(source.expander.type||"fluid.deferredInvokeCall");return expander?expander.call(null,target,source,options):void 0},fluid.fetchExpandChildren=function(target,i,segs,source,mergePolicy,miniWorld,options){if(source.expander){var expanded=fluid.expandExpander(target,source,options);if(options.freeRoot||fluid.isPrimitive(expanded)||fluid.isDOMish(expanded)||!fluid.isPlainObject(expanded)||fluid.isArrayable(expanded)^fluid.isArrayable(target))return expanded;$.extend(!0,target,expanded)}return fluid.each(source,function(newSource,key){void 0===newSource?target[key]=void 0:"expander"!==key&&(segs[i]=key,options.strategy(target,key,i+1,segs,source,mergePolicy,miniWorld))}),target},fluid.isUnexpandable=function(source){return fluid.isPrimitive(source)||fluid.isComponent(source)||void 0!==source.nodeType||source.jquery||!fluid.isPlainObject(source)},fluid.expandSource=function(options,target,i,segs,deliverer,source,policy,miniWorld,recurse){var expanded,isTrunk,isLate,thisPolicy=fluid.derefMergePolicy(policy);return"string"!=typeof source||thisPolicy.noexpand?thisPolicy.noexpand||fluid.isUnexpandable(source)?expanded=source:source.expander?expanded=fluid.expandExpander(deliverer,source,options):(thisPolicy.preserve?(expanded=source,isLate=!0):expanded=fluid.freshContainer(source),isTrunk=!0):options.defaultEL&&"{"!==source.charAt(0)?expanded=source:(fluid.pushActivity("expandContextValue","expanding context value %source held at path %path",{source:source,path:fluid.path.apply(null,segs.slice(0,i))}),expanded=fluid.resolveContextValue(source,options),fluid.popActivity(1)),isLate||expanded===fluid.NO_VALUE||deliverer(expanded),isTrunk&&recurse(expanded,source,i,segs,policy,miniWorld||isLate),isLate&&expanded!==fluid.NO_VALUE&&deliverer(expanded),expanded},fluid.makeExpandStrategy=function(options){var recurse=function(target,source,i,segs,policy,miniWorld){return fluid.fetchExpandChildren(target,i||0,segs||[],source,policy,miniWorld,options)},strategy=function(target,name,i,segs,source,policy,miniWorld){function deliverer(value){target[name]=value}if(i>fluid.strategyRecursionBailout&&fluid.fail("Overflow/circularity in options expansion, current path is ",segs," at depth ",i,' - please ensure options are not circularly connected, or protect from expansion using the "noexpand" policy or expander'),target){if(!miniWorld&&target.hasOwnProperty(name))return target[name];void 0===source&&(source=regenerateCursor(options.source,segs,i-1,options.sourceStrategy),policy=regenerateCursor(options.mergePolicy,segs,i-1,fluid.concreteTrundler));var thisSource=options.sourceStrategy(source,name,i,segs),thisPolicy=fluid.concreteTrundler(policy,name);return fluid.expandSource(options,target,i,segs,deliverer,thisSource,thisPolicy,miniWorld,recurse)}};return options.recurse=recurse,options.strategy=strategy,strategy},fluid.defaults("fluid.makeExpandOptions",{ELstyle:"${}",bareContextRefs:!0,target:fluid.inCreationMarker}),fluid.makeExpandOptions=function(source,options){return options=$.extend({},fluid.rawDefaults("fluid.makeExpandOptions"),options),options.defaultEL="${}"===options.ELStyle&&options.bareContextRefs,options.expandSource=function(source){return fluid.expandSource(options,null,0,[],fluid.identity,source,options.mergePolicy,!1)},fluid.isUnexpandable(source)?(options.strategy=fluid.concreteTrundler,options.initter=fluid.identity,"string"==typeof source?options.target=options.expandSource(source):options.target=source):(options.source=source,options.target=fluid.freshContainer(source),options.sourceStrategy=options.sourceStrategy||fluid.concreteTrundler,fluid.makeExpandStrategy(options),options.initter=function(){options.target=fluid.fetchExpandChildren(options.target,0,[],options.source,options.mergePolicy,!1,options)}),options},fluid.expand=function(source,options){var expandOptions=fluid.makeExpandOptions(source,options);return expandOptions.initter(),expandOptions.target},fluid.registerNamespace("fluid.expander"),fluid.expander.deferredCall=function(deliverer,source,options){var expander=source.expander,args=!expander.args||fluid.isArrayable(expander.args)?expander.args:fluid.makeArray(expander.args);return args=options.recurse([],args),fluid.invokeGlobalFunction(expander.func,args)},fluid.deferredCall=fluid.expander.deferredCall,fluid.deferredInvokeCall=function(deliverer,source,options){var expander=source.expander,args=fluid.makeArray(expander.args);args=options.recurse([],args);var funcEntry=expander.func||expander.funcName,func=options.expandSource(funcEntry)||fluid.recordToApplicable(expander,options.contextThat);return func||fluid.fail("Error in expander record - "+funcEntry+" could not be resolved to a function for component ",options.contextThat),func.apply?func.apply(null,args):fluid.invoke(func,args,options.contextThat)},fluid.expander.noexpand=function(deliverer,source){return source.expander.value?source.expander.value:source.expander.tree},fluid.noexpand=fluid.expander.noexpand}(jQuery,fluid_1_5);