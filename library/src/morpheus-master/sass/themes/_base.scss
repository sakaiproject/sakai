@use "sass:math";

@function defineColorHEX(
  $colorName,
  $colorValue,
  $colorPalette: $colorPalette
) {
  // Color palette generation
  // Use defineColorHEX to generate an 15 shade palette for a color.
  // defineColorHEX(colorName, colorValue)
  // @param colorName
  //      Type: string
  //      expects a name, no need to prepend --sakai
  // @param colorValue
  //      Type: Hexidecimal color value
  //      expects a 6 character hex color value
  // @returns a SASS map with 15 CSS variants of the initial $colorValue
  //      The HEX you provide in the parameters will be in the
  //      middle of the range at colorName.
  // Example usage
  //      defineColorHEX(myschool-gray, #cccccc);
  //
  //      To add to an existing map of colors
  //      $colorPalette: map-merge($colorPalette, defineColorHEX(sakai-red, #cc000a));
  @if (
      red($colorValue) ==
        255 and
        green($colorValue) ==
        255 and
        blue($colorValue) ==
        255
    ) or
    (
      red($colorValue) ==
        0 and
        green($colorValue) ==
        0 and
        blue($colorValue) ==
        0
    )
  {
    @return ($colorName: $colorValue);
  } @else {
    $colorMap: (
      #{$colorName}-10: tint-color($colorValue, 90),
      #{$colorName}-20: tint-color($colorValue, 80),
      #{$colorName}-25: tint-color($colorValue, 70),
      #{$colorName}-30: tint-color($colorValue, 60),
      #{$colorName}-35: tint-color($colorValue, 45),
      #{$colorName}-40: tint-color($colorValue, 30),
      #{$colorName}-45: tint-color($colorValue, 15),
      #{$colorName}-50: $colorValue,
      #{$colorName}-55: shade-color($colorValue, 15),
      #{$colorName}-60: shade-color($colorValue, 25),
      #{$colorName}-65: shade-color($colorValue, 35),
      #{$colorName}-70: shade-color($colorValue, 46),
      #{$colorName}-75: shade-color($colorValue, 58),
      #{$colorName}-80: shade-color($colorValue, 70),
      #{$colorName}-90: shade-color($colorValue, 82)
    );
    @return $colorMap;
  }
}

@mixin generateCSSProps($colorMap) {
  // CSS Custom Property Generation
  // Use a SASS Map to generate CSS Custom Properties
  // @include generateCSSProps($colorMap)
  // @param colorMap
  //      Type: SASS Map
  //      expects a map of key, value pairs
  //      (sakai-blue: #289ae2, sakai-blue-l1: #289ae2)
  // @returns a CSS Custom property for each key, value pair in the map
  // Example usage
  //      :root { @include generateCSSProps((sakai-blue: #289ae2, sakai-blue-l1: #289ae2)); }

  @each $name, $value in $colorMap {
    --#{$name}: #{$value};
  }
}

@function get-a11y-color(
  $color,
  $contrasting: $color,
  $colorPalette: $colorPalette
) {
  // Get an accessible color based off another color
  // Only works within the same color family "red", "green", etc
  // get-ally-color($color)
  // @param color
  //      Type: string
  //      expects a colorName generated from defineColorHEX()
  // @returns CSS the first color that meets WCAG2.0 AA requirements
  //   from list ($color-80, $color-10, $black, $white)
  // Example usage
  //      .selector { color: get-a11y-color(sakai-blue-l7); }

  // @debug "get-a11y-color(#{$color}: " + map-get($colorPalette, $color) + ")";

  @if str-index($color, "var(--") {
    $color: str-slice($color, 7, -2);
  }
  @if str-index($contrasting, "var(--") {
    $contrasting: str-slice($contrasting, 7, -2);
  }
  $family: str-slice($color, 0, -4);
  $lightContrast: $white;
  @if map-get($colorPalette, #{$family}-80) {
    $lightContrast: map-get($colorPalette, #{$family}-80);
  }
  $darkContrast: $black;
  @if map-get($colorPalette, #{$family}-10) {
    $darkContrast: map-get($colorPalette, #{$family}-10);
  }
  // @debug map-get($colorPalette, #{$contrasting}), $lightContrast, $darkContrast;

  $tmp: color-contrast(
    map-get($colorPalette, #{$contrasting}),
    $lightContrast, $darkContrast
  );
  $result: $tmp;
  @if $tmp == map-get($colorPalette, #{$family}-80) {
    $result: var(--#{$family}-80);
  } @else if $tmp == map-get($colorPalette, #{$family}-10) {
    $result: var(--#{$family}-10);
  }
  @return $result;
}

@function get-ally-color($color) {
  //An alias of get-a11y-color()
  @return get-a11y-color($color);
}

@mixin sakai-colorize(
  $background,
  $color: $background,
  $colorPalette: $colorPalette
) {
  // Create accessible color combinations
  // @include sakai-colorize($background, $color)
  // @param background
  //      Type: string
  //      expects a colorName generated from defineColorHEX()
  // @param color
  //      Type: string
  //      OPTIONAL expects a colorName generated from defineColorHEX()
  // @returns CSS the first color that meets WCAG2.0 AA requirements
  //   from list ($color, $black, $white)
  // Example usage
  //      .selector { @include sakai-colorize(sakai-red, sakai-blue-l7); }

  // @debug "sakai-colorize(#{$background}: " + map-get($colorPalette, $background) + ")";

  @if str-index($background, "var(--") {
    $background: str-slice($background, 7, -2);
  }
  color: get-a11y-color($color, $background, $colorPalette: $colorPalette);
  background-color: var(--#{$background});
}

@mixin sakai-colorize-all($colorMap) {
  // Generate CSS classes with accessible color combinations
  // @include sakai-colorize-all($colorPalette);
  // @param colorMap
  //      Type: SASS Map
  //      expects a map of key, value pairs from defineColorHEX()
  //      (sakai-blue: #289ae2, sakai-blue-l1: #289ae2)
  // @returns CSS Classes for all keys in the $colorMap
  //      These classes set the background-color to colorname and
  //      set the color to a value which will always pass WCAG AA
  //      guidelines from list ($value-d6, $value-l6, $black, $white)
  // Example usage
  //      @include sakai-colorize-all((sakai-blue: #289ae2, sakai-blue-l1: #289ae2));
  //      .selector ( @extend .sakai-blue; }

  @each $name, $value in $colorMap {
    @if red($value) == 255 and green($value) == 255 and blue($value) == 255 {
      .#{$name} {
        color: color-contrast(
          $value,
          map-get($colorMap, sakai-black),
          map-get($colorMap, sakai-white)
        );
        background-color: var(--#{$name});
      }
    } @else if red($value) == 0 and green($value) == 0 and blue($value) == 0 {
      .#{$name} {
        color: color-contrast(
          $value,
          map-get($colorMap, sakai-black),
          map-get($colorMap, sakai-white)
        );
        background-color: var(--#{$name});
      }
    } @else {
      $family: str-slice($name, 0, -4);
      .#{$name} {
        $tmp: color-contrast(
          $value,
          map-get($colorMap, #{$family}-80),
          map-get($colorMap, #{$family}-10)
        );
        $color: $tmp;
        @if $tmp == map-get($colorMap, #{$family}-80) {
          $color: var(--#{$family}-80);
        } @else if $tmp == map-get($colorMap, #{$family}-10) {
          $color: var(--#{$family}-10);
        }
        color: $color;
        background-color: var(--#{$name});
      }
    }
  }
}

// Color contrast from Bootstrap v5
// See https://github.com/twbs/bootstrap/

// A list of pre-calculated numbers of pow(($value / 255 + .055) / 1.055, 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$_luminance-list: 0.0008 0.001 0.0011 0.0013 0.0015 0.0017 0.002 0.0022 0.0025
  0.0027 0.003 0.0033 0.0037 0.004 0.0044 0.0048 0.0052 0.0056 0.006 0.0065
  0.007 0.0075 0.008 0.0086 0.0091 0.0097 0.0103 0.011 0.0116 0.0123 0.013
  0.0137 0.0144 0.0152 0.016 0.0168 0.0176 0.0185 0.0194 0.0203 0.0212 0.0222
  0.0232 0.0242 0.0252 0.0262 0.0273 0.0284 0.0296 0.0307 0.0319 0.0331 0.0343
  0.0356 0.0369 0.0382 0.0395 0.0409 0.0423 0.0437 0.0452 0.0467 0.0482 0.0497
  0.0513 0.0529 0.0545 0.0561 0.0578 0.0595 0.0612 0.063 0.0648 0.0666 0.0685
  0.0704 0.0723 0.0742 0.0762 0.0782 0.0802 0.0823 0.0844 0.0865 0.0887 0.0908
  0.0931 0.0953 0.0976 0.0999 0.1022 0.1046 0.107 0.1095 0.1119 0.1144 0.117
  0.1195 0.1221 0.1248 0.1274 0.1301 0.1329 0.1356 0.1384 0.1413 0.1441 0.147
  0.15 0.1529 0.1559 0.159 0.162 0.1651 0.1683 0.1714 0.1746 0.1779 0.1812
  0.1845 0.1878 0.1912 0.1946 0.1981 0.2016 0.2051 0.2086 0.2122 0.2159 0.2195
  0.2232 0.227 0.2307 0.2346 0.2384 0.2423 0.2462 0.2502 0.2542 0.2582 0.2623
  0.2664 0.2705 0.2747 0.2789 0.2831 0.2874 0.2918 0.2961 0.3005 0.305 0.3095
  0.314 0.3185 0.3231 0.3278 0.3325 0.3372 0.3419 0.3467 0.3515 0.3564 0.3613
  0.3663 0.3712 0.3763 0.3813 0.3864 0.3916 0.3968 0.402 0.4072 0.4125 0.4179
  0.4233 0.4287 0.4342 0.4397 0.4452 0.4508 0.4564 0.4621 0.4678 0.4735 0.4793
  0.4851 0.491 0.4969 0.5029 0.5089 0.5149 0.521 0.5271 0.5333 0.5395 0.5457
  0.552 0.5583 0.5647 0.5711 0.5776 0.5841 0.5906 0.5972 0.6038 0.6105 0.6172
  0.624 0.6308 0.6376 0.6445 0.6514 0.6584 0.6654 0.6724 0.6795 0.6867 0.6939
  0.7011 0.7084 0.7157 0.7231 0.7305 0.7379 0.7454 0.7529 0.7605 0.7682 0.7758
  0.7835 0.7913 0.7991 0.807 0.8148 0.8228 0.8308 0.8388 0.8469 0.855 0.8632
  0.8714 0.8796 0.8879 0.8963 0.9047 0.9131 0.9216 0.9301 0.9387 0.9473 0.956
  0.9647 0.9734 0.9823 0.9911 1;

@function color-contrast(
  $background,
  $color-contrast-dark: $color-contrast-dark,
  $color-contrast-light: $color-contrast-light,
  $min-contrast-ratio: $min-contrast-ratio
) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);
    @if $contrast-ratio > $min-contrast-ratio {
      @return $color;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if(
    $l1 > $l2,
    math.div(($l1 + 0.05), ($l2 + 0.05)),
    math.div(($l2 + 0.05), ($l1 + 0.05))
  );
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $rgb: (
    "r": red($color),
    "g": green($color),
    "b": blue($color),
  );

  @each $name, $value in $rgb {
    $value: if(
      math.div($value, 255) < 0.03928,
      math.div(math.div($value, 255), 12.92),
      nth($_luminance-list, $value + 1)
    );
    $rgb: map-merge(
      $rgb,
      (
        $name: $value,
      )
    );
  }

  @return (map-get($rgb, "r") * 0.2126) + (map-get($rgb, "g") * 0.7152) +
    (map-get($rgb, "b") * 0.0722);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100);
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

// Shade a color: mix a color with black
@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
  @return if(
    $weight > 0,
    shade-color($color, $weight),
    tint-color($color, -$weight)
  );
}
// scss-docs-end color-functions

// The contrast ratio to reach against white, to determine if color changes from "light" to "dark". Acceptable values for WCAG 2.0 are 3, 4.5 and 7.
// See https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
$min-contrast-ratio: 4.5 !default;

$white: #fff !default;
$black: #000 !default;
$color-contrast-light: $white !default;
$color-contrast-dark: $black !default;

/* Base theme */

$colorPalette: (
  "sakai-white": $white,
  "sakai-black": $black
) !default;

$theme-colors: (
  "sakai-white": $white,
  "sakai-black": $black,
  "sakai-gray": #898c90,
  "sakai-blue": #289ae2,
  "sakai-teal": #009999,
  "sakai-gold": #dab601,
  "sakai-green": #07a64f,
  "sakai-orange": #d97008,
  "sakai-purple": #4848f9,
  "sakai-red": #cc000a,
  "sakai-navy": #425466
) !default;
