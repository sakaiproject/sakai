/**
 * Copyright (c) 2003-2017 The Apereo Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *             http://opensource.org/licenses/ecl2
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sakaiproject.assignment.tool;

import java.text.Collator;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

public class AssignmentComparator implements Comparator<AssignmentTransferBean> {

    Collator collator = null;
    Map<String, Integer> crSubmissionScoreMap = new HashMap<>();

    /**
     * the SessionState object
     */
    SessionState m_state = null;

    /**
     * the criteria
     */
    String m_criteria = null;

    /**
     * the criteria
     */
    String m_asc = null;

    /**
     * the user
     */
    User m_user = null;

    // true if users should be compared by anonymous submitter id rather than other identifiers
    boolean m_anon = false;

    /**
     * constructor
     *
     * @param state    The state object
     * @param criteria The sort criteria string
     * @param asc      The sort order string. TRUE_STRING if ascending; "false" otherwise.
     */
    public AssignmentComparator(SessionState state, String criteria, String asc) {
        this(state, criteria, asc, null);

    } // constructor

    /**
     * constructor
     *
     * @param state    The state object
     * @param criteria The sort criteria string
     * @param asc      The sort order string. TRUE_STRING if ascending; "false" otherwise.
     * @param user     The user object
     */
    public AssignmentComparator(SessionState state, String criteria, String asc, User user) {
        m_state = state;
        m_criteria = criteria;
        m_asc = asc;
        m_user = user;
        try {
            collator = new RuleBasedCollator(((RuleBasedCollator) Collator.getInstance()).getRules().replaceAll("<'\u005f'", "<' '<'\u005f'"));
        } catch (ParseException e) {
            // error with init RuleBasedCollator with rules
            // use the default Collator
            collator = Collator.getInstance();
            log.warn(this + " AssignmentComparator cannot init RuleBasedCollator. Will use the default Collator instead. " + e);
        }
    } // constructor

    /**
     * caculate the range string for an assignment
     */
    private String getAssignmentRange(AssignmentTransferBean a) {
        String rv = "";
        if (a.getTypeOfAccess().equals(Assignment.Access.SITE)) {
            // site assignment
            rv = rb.getString("range.allgroups");
        } else {
            try {
                Site site = siteService.getSite(a.getContext());
                for (String s : a.getGroups()) {
                    // announcement by group
                    Group group = site.getGroup(s);
                    if (group != null)
                        rv = rv.concat(group.getTitle());
                }
            } catch (IdUnusedException iue) {
                log.warn("Could not get site: {}, {}", a.getContext(), iue.getMessage());
            }
        }

        return rv;

    } // getAssignmentRange

    public void setAnon(boolean value) {
        m_anon = value;
    }

    /**
     * implementing the compare function
     *
     * @param o1 The first object
     * @param o2 The second object
     * @return The compare result. 1 is o1 < o2; -1 otherwise
     */
    public int compare(AssignmentTransferBean a1, AssignmentTransferBean a2) {
        int result = -1;

        if (m_criteria == null) {
            m_criteria = SORTED_BY_DEFAULT;
        }

        /** *********** for sorting assignments ****************** */
        if (m_criteria.equals(SORTED_BY_DEFAULT)) {
            int s1 = a1.getPosition();
            int s2 = a2.getPosition();

            if (s1 == s2) {
                // we either have 2 assignments with no existing postion_order or a numbering error, so sort by duedate
                // sorted by the assignment due date
                Instant t1 = a1.getDueDate();
                Instant t2 = a1.getDueDate();

                if (t1 == null) {
                    result = -1;
                } else if (t2 == null) {
                    result = 1;
                } else {
                    if (t1.equals(t2)) {
                        t1 = a1.getDateCreated();
                        t2 = a2.getDateCreated();
                    }
                    if (t1.isBefore(t2)) {
                        result = 1;
                    } else {
                        result = -1;
                    }
                }
            } else if (s1 == 0 && s2 > 0) // order has not been set on this object, so put it at the bottom of the list
            {
                result = 1;
            } else if (s2 == 0 && s1 > 0) // making sure assignments with no position_order stay at the bottom
            {
                result = -1;
            } else // 2 legitimate postion orders
            {
                result = (s1 < s2) ? -1 : 1;
            }
        }
        if (m_criteria.equals(SORTED_BY_TITLE)) {
            result = compareString(a1.getTitle(), a2.getTitle());
        } else if (m_criteria.equals(SORTED_BY_SECTION)) {
            result = compareString(a1.getSection(), a2.getSection());
        } else if (m_criteria.equals(SORTED_BY_DUEDATE)) {
            result = compareInstant(a1.getDueDate(), a2.getDueDate());
        } else if (m_criteria.equals(SORTED_BY_SOFT_REMOVED_DATE)) {
            result = compareInstant(a1.getSoftRemovedDate(), a2.getSoftRemovedDate());
        } else if (m_criteria.equals(SORTED_BY_MODIFIEDDATE)) {
            result = compareInstant(a1.getDateModified(), a2.getDateModified());
        } else if (m_criteria.equals(SORTED_BY_MODIFIEDUSER)) {
            try {
                User u1 = userDirectoryService.getUser(a1.getModifier());
                User u2 = userDirectoryService.getUser(a2.getModifier());
                result = new UserSortNameComparator().compare(u1, u2);
            } catch (UserNotDefinedException e) {
                log.error("Could not get user {} or {}: {}", a1.getModifier(), a2.getModifier(), e.toString());
            }
        } else if (m_criteria.equals(SORTED_BY_OPENDATE)) {
            result = compareInstant(a1.getOpenDate(), a2.getOpenDate());
        } else if (m_criteria.equals(SORTED_BY_ASSIGNMENT_STATUS)) {

            if (assignmentService.allowAddAssignment(a1.getContext())) {
                // comparing assignment status
                String s1 = assignmentService.getAssignmentStatus(a1.getId());
                String s2 = assignmentService.getAssignmentStatus(a2.getId());
                result = compareString(s1, s2);
            } else {
                // comparing submission status
                SubmissionTransferBean as1 = findAssignmentSubmission(a1);
                SubmissionTransferBean as2 = findAssignmentSubmission(a2);
                String s1 = assignmentService.getSubmissionStatus(as1.getId(), false);
                String s2 = assignmentService.getSubmissionStatus(as2.getId(), false);
                result = as1 == null ? 1 : as2 == null ? -1 : compareString(s1, s2);
            }
        } else if (m_criteria.equals(SORTED_BY_NUM_SUBMISSIONS)) {
            // sort by numbers of submissions
            String assignment1reference = AssignmentReferenceReckoner.reckoner().assignment(a1).reckon().getReference();
            int subNum1 = assignment1.getDraft() ? -1 : assignmentService.countSubmissions(assignment1reference, null);

            String assignment2reference = AssignmentReferenceReckoner.reckoner().assignment(a2).reckon().getReference();
            int subNum2 = a2.getDraft() ? -1 : assignmentService.countSubmissions(assignment2reference, null);

            result = (subNum1 > subNum2) ? 1 : -1;

        } else if (m_criteria.equals(SORTED_BY_NUM_UNGRADED)) {
            // sort by numbers of ungraded submissions

            // initialize
            int ungraded1 = 0;
            int ungraded2 = 0;
            Instant t1, t2;

            Iterator<SubmissionTransferBean> submissions1 = assignmentService.getSubmissions(a1.getId()).iterator();
            while (submissions1.hasNext()) {
                SubmissionTransferBean submission1 = submissions1.next();
                t1 = submission1.getDateSubmitted();

                if (t1 != null && !submission1.getGraded()) ungraded1++;
            }

            Iterator<SubmissionTransferBean> submissions2 = assignmentService.getSubmissions(a2.getId()).iterator();
            while (submissions2.hasNext()) {
                SubmissionTransferBean submission2 = submissions2.next();
                t2 = submission2.getDateSubmitted();

                if (t2 != null && !submission2.getGraded()) ungraded2++;
            }

            result = (ungraded1 > ungraded2) ? 1 : -1;

        } else if (m_criteria.equals(SORTED_BY_GRADE) || m_criteria.equals(SORTED_BY_SUBMISSION_STATUS)) {
            SubmissionTransferBean submission1 = getSubmission(a1.getId(), m_user, "compare", null);
            String grade1 = " ";
            if (submission1 != null && submission1.getGraded() && submission1.getGradeReleased()) {
                grade1 = submission1.getGrade();
            }

            SubmissionTransferBean submission2 = getSubmission(a2.getId(), m_user, "compare", null);
            String grade2 = " ";
            if (submission2 != null && submission2.getGraded() && submission2.getGradeReleased()) {
                grade2 = submission2.getGrade();
            }

            result = compareString(grade1, grade2);
        } else if (m_criteria.equals(SORTED_BY_MAX_GRADE)) {
            String maxGrade1 = maxGrade(a1.getTypeOfGrade(), a1);
            String maxGrade2 = maxGrade(a2.getTypeOfGrade(), a2);

            try {
                // do integer comparation inside point grade type
                int max1 = Integer.parseInt(maxGrade1);
                int max2 = Integer.parseInt(maxGrade2);
                result = (max1 < max2) ? -1 : 1;
            } catch (NumberFormatException e) {
                // otherwise do an alpha-compare
                result = compareString(maxGrade1, maxGrade2);
            }
        }
        // group related sorting
        else if (m_criteria.equals(SORTED_BY_FOR)) {
            // sorted by the public view attribute
            String factor1 = getAssignmentRange(a1);
            String factor2 = getAssignmentRange(a2);
            result = compareString(factor1, factor2);
        } else if (m_criteria.equals(SORTED_BY_GROUP_TITLE)) {
            // sorted by the group title
            String factor1 = ((Group) o1).getTitle();
            String factor2 = ((Group) o2).getTitle();
            result = new AlphaNumericComparator().compare(factor1, factor2);
        } else if (m_criteria.equals(SORTED_BY_GROUP_DESCRIPTION)) {
            // sorted by the group description
            String factor1 = ((Group) o1).getDescription();
            String factor2 = ((Group) o2).getDescription();
            if (factor1 == null) {
                factor1 = "";
            }
            if (factor2 == null) {
                factor2 = "";
            }
            result = compareString(factor1, factor2);
        }
        /** ***************** for sorting submissions in instructor grade assignment view ************* */
        else if (m_criteria.equals(SORTED_GRADE_SUBMISSION_CONTENTREVIEW)) {
            SubmitterSubmission u1 = (SubmitterSubmission) o1;
            SubmitterSubmission u2 = (SubmitterSubmission) o2;
            if (u1 == null || u2 == null) {
                result = 1;
            } else {
                SubmissionTransferBean s1 = u1.getSubmission();
                SubmissionTransferBean s2 = u2.getSubmission();

                if (s1 == null) {
                    result = -1;
                } else if (s2 == null) {
                    result = 1;
                } else {
                    // Avoid expensive calls below if possible
                    Integer score1 = crSubmissionScoreMap.get(s1.getId());
                    Integer score2 = crSubmissionScoreMap.get(s2.getId());

                    if (score1 == null) {
                      score1 = getContentReviewResultScore(assignmentService.getContentReviewResults(s1));
                      crSubmissionScoreMap.put(s1.getId(), score1);
                    }
                    if (score2 == null) {
                      score2 = getContentReviewResultScore(assignmentService.getContentReviewResults(s2));
                      crSubmissionScoreMap.put(s2.getId(), score2);
                    }

                    if (score1 == null && score2 == null) {
                        result = 0;
                    } else if (score1 == null) {
                        result = -1;
                    } else if (score2 == null) {
                        result = 1;
                    } else {
                        result = score1 == score2 ? 0 : (score1 > score2 ? 1 : -1);
                    }
                }
            }

        } else if (m_criteria.equals(SORTED_GRADE_SUBMISSION_BY_LASTNAME)) {
            // sorted by the submitters sort name
            SubmitterSubmission u1 = (SubmitterSubmission) o1;
            SubmitterSubmission u2 = (SubmitterSubmission) o2;

            if (u1 == null || u2 == null || (u1.getUser() == null && u1.getGroup() == null) || (u2.getUser() == null && u2.getGroup() == null)) {
                result = 1;
            } else if (m_anon) {
                String anon1 = u1.getSubmission().getId();
                String anon2 = u2.getSubmission().getId();
                result = compareString(anon1, anon2);
            } else if (u1.getUser() != null && u2.getUser() != null) {
                result = new UserSortNameComparator().compare(u1.getUser(), u2.getUser());
            } else {
                String lName1 = u1.getUser() == null ? u1.getGroup().getTitle() : u1.getUser().getSortName();
                String lName2 = u2.getUser() == null ? u2.getGroup().getTitle() : u2.getUser().getSortName();
                result = compareString(lName1, lName2);
            }
        } else if (m_criteria.equals(SORTED_GRADE_SUBMISSION_BY_SUBMIT_TIME)) {
            // sorted by submission time
            SubmitterSubmission u1 = (SubmitterSubmission) o1;
            SubmitterSubmission u2 = (SubmitterSubmission) o2;

            if (u1 == null || u2 == null) {
                result = -1;
            } else {
                SubmissionTransferBean s1 = u1.getSubmission();
                SubmissionTransferBean s2 = u2.getSubmission();


                if (s1 == null || s1.getDateSubmitted() == null) {
                    result = -1;
                } else if (s2 == null || s2.getDateSubmitted() == null) {
                    result = 1;
                } else if (s1.getDateSubmitted().isBefore(s2.getDateSubmitted())) {
                    result = -1;
                } else {
                    result = 1;
                }
            }
        } else if (m_criteria.equals(SORTED_GRADE_SUBMISSION_BY_STATUS)) {
            // sort by submission status
            SubmitterSubmission u1 = (SubmitterSubmission) o1;
            SubmitterSubmission u2 = (SubmitterSubmission) o2;

            String status1 = "";
            String status2 = "";

            if (u1 == null) {
                status1 = rb.getString("listsub.nosub");
            } else {
                SubmissionTransferBean s1 = u1.getSubmission();
                if (s1 == null) {
                    status1 = rb.getString("listsub.nosub");
                } else {
                    status1 = assignmentService.getSubmissionStatus(s1.getId(), false);
                }
            }

            if (u2 == null) {
                status2 = rb.getString("listsub.nosub");
            } else {
                SubmissionTransferBean s2 = u2.getSubmission();
                if (s2 == null) {
                    status2 = rb.getString("listsub.nosub");
                } else {
                    status2 = assignmentService.getSubmissionStatus(s2.getId(), false);
                }
            }

            result = compareString(status1, status2);
        } else if (m_criteria.equals(SORTED_GRADE_SUBMISSION_BY_GRADE)) {
            // sort by submission status
            SubmitterSubmission u1 = (SubmitterSubmission) o1;
            SubmitterSubmission u2 = (SubmitterSubmission) o2;

            if (u1 == null || u2 == null) {
                result = -1;
            } else {
                SubmissionTransferBean s1 = u1.getSubmission();
                AssignmentTransferBean a1 = assignmentService.getAssignment(s1.getAssignmentId());
                SubmissionTransferBean s2 = u2.getSubmission();
                AssignmentTransferBean a2 = assignmentService.getAssignment(s2.getAssignmentId());

                //sort by submission grade
                if (s1 == null) {
                    result = -1;
                } else if (s2 == null) {
                    result = 1;
                } else {
                    String grade1 = s1.getGrade();
                    String grade2 = s2.getGrade();
                    if (grade1 == null) {
                        grade1 = "";
                    }
                    if (grade2 == null) {
                        grade2 = "";
                    }

                    // if scale is points
                    if ((a1.getTypeOfGrade() == Assignment.GradeType.SCORE_GRADE_TYPE)
                            && ((a2.getTypeOfGrade() == Assignment.GradeType.SCORE_GRADE_TYPE))) {
                        if ("".equals(grade1)) {
                            result = -1;
                        } else if ("".equals(grade2)) {
                            result = 1;
                        } else {
                            result = compareDouble(grade1, grade2);
                        }
                    } else {
                        result = compareString(grade1, grade2);
                    }
                }
            }
        } else if (m_criteria.equals(SORTED_GRADE_SUBMISSION_BY_RELEASED)) {
            // sort by submission status
            SubmitterSubmission u1 = (SubmitterSubmission) o1;
            SubmitterSubmission u2 = (SubmitterSubmission) o2;

            if (u1 == null || u2 == null) {
                result = -1;
            } else {
                SubmissionTransferBean s1 = u1.getSubmission();
                SubmissionTransferBean s2 = u2.getSubmission();

                if (s1 == null) {
                    result = -1;
                } else if (s2 == null) {
                    result = 1;
                } else {
                    // sort by submission released
                    String released1 = (s1.getGradeReleased()).toString();
                    String released2 = (s2.getGradeReleased()).toString();

                    result = compareString(released1, released2);
                }
            }
        }
        /****** for other sort on submissions **/
        else if (m_criteria.equals(SORTED_SUBMISSION_BY_LASTNAME)) {
            // sorted by the submitters sort name
            SubmissionTransferBean a1 = (SubmissionTransferBean) o1;
            SubmissionTransferBean a2 = (SubmissionTransferBean) o2;
            String s1 = "";
            String s2 = "";

            if (a1.getAssignment().getIsGroup()) {
                try {
                    Site site = siteService.getSite(a1.getAssignment().getContext());
                    s1 = site.getGroup(a1.getGroupId()).getTitle();
                } catch (Throwable _dfef) {
                }
            } else {
                try {
                    s1 = userDirectoryService.getUser(a1.getSubmitters().toArray(new AssignmentSubmissionSubmitter[0])[0].getSubmitter()).getSortName();
                } catch (UserNotDefinedException e) {
                    log.warn("Cannot find user id while sorting by last name for submission: {}, {}", a1.getId(), e.getMessage());
                }
            }
            if (a2.getAssignment().getIsGroup()) {
                try {
                    Site site = siteService.getSite(a2.getAssignment().getContext());
                    s2 = site.getGroup(a2.getGroupId()).getTitle();
                } catch (Throwable _dfef) { // TODO empty exception block
                }
            } else {
                try {
                    s2 = userDirectoryService.getUser(a2.getSubmitters().toArray(new AssignmentSubmissionSubmitter[0])[0].getSubmitter()).getSortName();
                } catch (UserNotDefinedException e) {
                    log.warn("Cannot find user id while sorting by last name for submission: {}, {}", a2.getId(), e.getMessage());
                }
            }

            result = s1.compareTo(s2); //compareString(submitters1, submitters2);
        } else if (m_criteria.equals(SORTED_SUBMISSION_BY_SUBMIT_TIME)) {
            // sorted by submission time
            Instant t1 = ((AssignmentSubmission) o1).getDateSubmitted();
            Instant t2 = ((AssignmentSubmission) o2).getDateSubmitted();

            if (t1 == null) {
                result = -1;
            } else if (t2 == null) {
                result = 1;
            } else if (t1.isBefore(t2)) {
                result = -1;
            } else {
                result = 1;
            }
        } else if (m_criteria.equals(SORTED_SUBMISSION_BY_STATUS)) {
            // sort by submission status
            String s1 = assignmentService.getSubmissionStatus(((AssignmentSubmission) o1).getId(), false);
            String s2 = assignmentService.getSubmissionStatus(((AssignmentSubmission) o2).getId(), false);
            result = compareString(s1, s2);
        } else if (m_criteria.equals(SORTED_SUBMISSION_BY_GRADE)) {
            // sort by submission grade
            String grade1 = ((AssignmentSubmission) o1).getGrade();
            String grade2 = ((AssignmentSubmission) o2).getGrade();
            if (grade1 == null) {
                grade1 = "";
            }
            if (grade2 == null) {
                grade2 = "";
            }

            // if scale is points
            if ((((AssignmentSubmission) o1).getAssignment().getTypeOfGrade() == Assignment.GradeType.SCORE_GRADE_TYPE)
                    && ((((AssignmentSubmission) o2).getAssignment().getTypeOfGrade() == Assignment.GradeType.SCORE_GRADE_TYPE))) {
                if ("".equals(grade1)) {
                    result = -1;
                } else if ("".equals(grade2)) {
                    result = 1;
                } else {
                    result = compareDouble(grade1, grade2);
                }
            } else {
                result = compareString(grade1, grade2);
            }
        } else if (m_criteria.equals(SORTED_SUBMISSION_BY_GRADE)) {
            // sort by submission grade
            String grade1 = ((SubmissionTransferBean) o1).getGrade();
            String grade2 = ((SubmissionTransferBean) o2).getGrade();
            if (grade1 == null) {
                grade1 = "";
            }
            if (grade2 == null) {
                grade2 = "";
            }

            // if scale is points
            if ((((AssignmentSubmission) o1).getAssignment().getTypeOfGrade() == Assignment.GradeType.SCORE_GRADE_TYPE)
                    && ((((AssignmentSubmission) o2).getAssignment().getTypeOfGrade() == Assignment.GradeType.SCORE_GRADE_TYPE))) {
                if ("".equals(grade1)) {
                    result = -1;
                } else if ("".equals(grade2)) {
                    result = 1;
                } else {
                    result = compareDouble(grade1, grade2);
                }
            } else {
                result = compareString(grade1, grade2);
            }
        } else if (m_criteria.equals(SORTED_SUBMISSION_BY_MAX_GRADE)) {
            AssignmentTransferBean a1 = assignmentService.getAssignment(((SubmissionTransferBean) o1).getAssignmentId());
            AssignmentTransferBean a2 = assignmentService.getAssignment(((SubmissionTransferBean) o2).getAssignmentId());
            String maxGrade1 = maxGrade(a1.getTypeOfGrade(), a1);
            String maxGrade2 = maxGrade(a2.getTypeOfGrade(), a2);

            try {
                // do integer comparation inside point grade type
                int max1 = Integer.parseInt(maxGrade1);
                int max2 = Integer.parseInt(maxGrade2);
                result = (max1 < max2) ? -1 : 1;
            } catch (NumberFormatException e) {
                log.warn(this + ":AssignmentComparator compare" + e.getMessage());
                // otherwise do an alpha-compare
                result = maxGrade1.compareTo(maxGrade2);
            }
        } else if (m_criteria.equals(SORTED_SUBMISSION_BY_RELEASED)) {
            // sort by submission released
            String released1 = (Boolean.valueOf(((AssignmentSubmission) o1).getGradeReleased())).toString();
            String released2 = (Boolean.valueOf(((AssignmentSubmission) o2).getGradeReleased())).toString();

            result = compareString(released1, released2);
        } else if (m_criteria.equals(SORTED_SUBMISSION_BY_ASSIGNMENT)) {
            // sort by submission's assignment
            String title1 = ((AssignmentSubmission) o1).getAssignment().getTitle();
            String title2 = ((AssignmentSubmission) o2).getAssignment().getTitle();

            result = compareString(title1, title2);
        }
        /*************** sort user by sort name ***************/
        else if (m_criteria.equals(SORTED_USER_BY_SORTNAME)) {
            // sort by user's sort name
            String name1 = ((User) o1).getSortName();
            String name2 = ((User) o2).getSortName();

            result = compareString(name1, name2);

        } else if (m_criteria.equals(SORTED_BY_ESTIMATE)) {
            // sorted by the assignment estimate
            String t1 = ((Assignment) o1).getEstimate();
            String t2 = ((Assignment) o2).getEstimate();
            result = compareEstimate(t1, t2);

        }else if (m_criteria.equals(SORTED_GRADE_SUBMISSION_BY_ESTIMATE)) {
            // sorted by the submission time spent
            SubmitterSubmission u1 = (SubmitterSubmission) o1;
            SubmitterSubmission u2 = (SubmitterSubmission) o2;
            String t1 = u1.getTimeSpent();
            String t2 = u2.getTimeSpent();
            result = compareEstimate(t1, t2);
        }

        // sort ascending or descending
        if (!Boolean.valueOf(m_asc)) {
            result = -result;
        }
        return result;
    }

    private int compareEstimate(String t1, String t2) {
        int result;
        if (StringUtils.isBlank(t1)  && StringUtils.isBlank(t2)) {
            result = 0;
        } else if (StringUtils.isBlank(t2)) {
            result = 1;
        } else if (StringUtils.isBlank(t1)) {
            result = -1;
        } else {
            int i1, i2;
            i1 = assignmentService.timeToInt(t1);
            i2 = assignmentService.timeToInt(t2);
            result = (i1 < i2) ? -1 : 1;
        }
        return result;
    }

    private int getContentReviewResultScore(List<ContentReviewResult> resultList) {
        if (CollectionUtils.isEmpty(resultList)) {
            return -1;
        }

        // Find the highest score in all of the possible submissions
        int score = -99;

        for (ContentReviewResult crr : resultList) {
            if (score <= -2 && crr.isPending()) {
                score = -2;
            } else if (score <= -1 && Objects.equals(crr.getReviewReport(), "Error")) {
                // Yes, "Error" appears to be magic throughout the review code
                // Error should appear before pending
                score = -1;
            } else if (crr.getReviewScore() > score) {
                score = crr.getReviewScore();
            }
        }

        return score;
    }

    /**
     * returns SubmissionTransferBean object for given assignment by current user
     *
     * @param a
     * @return
     */
    protected SubmissionTransferBean findAssignmentSubmission(AssignmentTransferBean a) {
        User user = userDirectoryService.getCurrentUser();
        try {
            return assignmentService.getSubmission(a.getId(), user);
        } catch (PermissionException e) {
            log.warn("Could not access submission for user: {}, {}", user.getId(), e.getMessage());
        }
        return null;
    }

    /**
     * Compare two strings as double values. Deal with the case when either of the strings cannot be parsed as double value.
     *
     * @param grade1
     * @param grade2
     * @return
     */
    private int compareDouble(String grade1, String grade2) {
        int result;
        try {
            result = Double.valueOf(grade1) > Double.valueOf(grade2) ? 1 : -1;
        } catch (Exception formatException) {
            // in case either grade1 or grade2 cannot be parsed as Double
            result = compareString(grade1, grade2);
            log.warn(this + ":AssignmentComparator compareDouble " + formatException.getMessage());
        }
        return result;
    } // compareDouble

    private int compareString(String s1, String s2) {
        int result;
        if (s1 == null && s2 == null) {
            result = 0;
        } else if (s2 == null) {
            result = 1;
        } else if (s1 == null) {
            result = -1;
        } else {
            result = collator.compare(s1.toLowerCase(), s2.toLowerCase());
        }
        return result;
    }

    private int compareInstant(Instant t1, Instant t2) {
        if (t1 == null) {
            return -1;
        } else if (t2 == null) {
            return 1;
        } else if (t1.isBefore(t2)) {
            return -1;
        } else {
            return 1;
        }
    }

    /**
     * get assignment maximum grade available based on the assignment grade type
     *
     * @param gradeType The int value of grade type
     * @param a         The assignment object
     * @return The max grade String
     */
    private String maxGrade(Assignment.GradeType gradeType, AssignmentTransferBean a) {
        String maxGrade = "";

        if (gradeType == Assignment.GradeType.GRADE_TYPE_NONE) {
            // Grade type not set
            maxGrade = rb.getString("granotset");
        } else if (gradeType == Assignment.GradeType.UNGRADED_GRADE_TYPE) {
            // Ungraded grade type
            maxGrade = rb.getString("gen.nograd");
        } else if (gradeType == Assignment.GradeType.LETTER_GRADE_TYPE) {
            // Letter grade type
            maxGrade = "A";
        } else if (gradeType == Assignment.GradeType.SCORE_GRADE_TYPE) {
            // Score based grade type
            maxGrade = Integer.toString(a.getMaxGradePoint());
        } else if (gradeType == Assignment.GradeType.PASS_FAIL_GRADE_TYPE) {
            // Pass/fail grade type
            maxGrade = rb.getString("pass");
        } else if (gradeType == Assignment.GradeType.CHECK_GRADE_TYPE) {
            // Grade type that only requires a check
            maxGrade = rb.getString("check");
        }

        return maxGrade;

    } // maxGrade
}
